# twikit package — twikit documentation

Author: exception twikit.errors.Unauthorized(*args: object, headers: dict | None = None)[source]
Date: 2025-01-10T04:57:18.053Z
Source: twikit.readthedocs.io
URL: https://twikit.readthedocs.io/en/latest/twikit.html
Date saved: 2025-01-10T04:57:18.053Z

> https://github.com/d60/twikit A Python library for interacting with the Twitter API.

---

## Twikit Twitter API Wrapper[](#twikit-twitter-api-wrapper "Link to this heading")

[https://github.com/d60/twikit](https://github.com/d60/twikit) A Python library for interacting with the Twitter API.

## Client[](#client "Link to this heading")

_class_twikit.client.client.Client(_language:str\='en-US'_, _proxy:str|None\=None_, _captcha\_solver:[Capsolver](#twikit._captcha.capsolver.Capsolver "twikit._captcha.capsolver.Capsolver")|None\=None_, _user\_agent:str|None\=None_, _\*\*kwargs_)[\[source\]](_modules/twikit/client/client.html#Client)[](#twikit.client.client.Client "Link to this definition")

A client for interacting with the Twitter API. Since this class is for asynchronous use, methods must be executed using await.

Parameters:

*   **language** (`str` | None, default=None) – The language code to use in API requests.
    
*   **proxy** (`str` | None, default=None) – The proxy server URL to use for request (e.g., ‘[http://0.0.0.0:0000](http://0.0.0.0:0/)’).
    
*   **captcha\_solver** ([`Capsolver`](#twikit._captcha.capsolver.Capsolver "twikit._captcha.capsolver.Capsolver") | None, default=None) – See [`Capsolver`](#twikit._captcha.capsolver.Capsolver "twikit._captcha.capsolver.Capsolver").
    

Examples

\>>> client\=Client(language\='en-US')

\>>> awaitclient.login(... auth\_info\_1\='example\_user',... auth\_info\_2\='email@example.com',... password\='00000000'... )

_async_login(_\*_, _auth\_info\_1:str_, _auth\_info\_2:str|None\=None_, _password:str_, _totp\_secret:str|None\=None_)→dict[\[source\]](_modules/twikit/client/client.html#Client.login)[](#twikit.client.client.Client.login "Link to this definition")

Logs into the account using the specified login information. auth\_info\_1 and password are required parameters. auth\_info\_2 is optional and can be omitted, but it is recommended to provide if available. The order in which you specify authentication information (auth\_info\_1 and auth\_info\_2) is flexible.

Parameters:

*   **auth\_info\_1** (`str`) – The first piece of authentication information, which can be a username, email address, or phone number.
    
*   **auth\_info\_2** (`str`, default=None) – The second piece of authentication information, which is optional but recommended to provide. It can be a username, email address, or phone number.
    
*   **password** (`str`) – The password associated with the account.
    
*   **totp\_secret** (`str`) – The TOTP (Time-Based One-Time Password) secret key used for two-factor authentication (2FA).
    

Examples

\>>> awaitclient.login(... auth\_info\_1\='example\_user',... auth\_info\_2\='email@example.com',... password\='00000000'... )

_async_logout()→Response[\[source\]](_modules/twikit/client/client.html#Client.logout)[](#twikit.client.client.Client.logout "Link to this definition")

Logs out of the currently logged-in account.

_async_unlock()→None[\[source\]](_modules/twikit/client/client.html#Client.unlock)[](#twikit.client.client.Client.unlock "Link to this definition")

Unlocks the account using the provided CAPTCHA solver.

get\_cookies()→dict[\[source\]](_modules/twikit/client/client.html#Client.get_cookies)[](#twikit.client.client.Client.get_cookies "Link to this definition")

Get the cookies. You can skip the login procedure by loading the saved cookies using the [`set_cookies()`](#twikit.client.client.Client.set_cookies "twikit.client.client.Client.set_cookies") method.

Examples

save\_cookies(_path:str_)→None[\[source\]](_modules/twikit/client/client.html#Client.save_cookies)[](#twikit.client.client.Client.save_cookies "Link to this definition")

Save cookies to file in json format. You can skip the login procedure by loading the saved cookies using the [`load_cookies()`](#twikit.client.client.Client.load_cookies "twikit.client.client.Client.load_cookies") method.

Parameters:

**path** (`str`) – The path to the file where the cookie will be stored.

Examples

\>>> client.save\_cookies('cookies.json')

set\_cookies(_cookies:dict_, _clear\_cookies:bool\=False_)→None[\[source\]](_modules/twikit/client/client.html#Client.set_cookies)[](#twikit.client.client.Client.set_cookies "Link to this definition")

Sets cookies. You can skip the login procedure by loading a saved cookies.

Parameters:

**cookies** (`dict`) – The cookies to be set as key value pair.

Examples

\>>> withopen('cookies.json','r',encoding\='utf-8')asf:... client.set\_cookies(json.load(f))

load\_cookies(_path:str_)→None[\[source\]](_modules/twikit/client/client.html#Client.load_cookies)[](#twikit.client.client.Client.load_cookies "Link to this definition")

Loads cookies from a file. You can skip the login procedure by loading a saved cookies.

Parameters:

**path** (`str`) – Path to the file where the cookie is stored.

Examples

\>>> client.load\_cookies('cookies.json')

set\_delegate\_account(_user\_id:str|None_)→None[\[source\]](_modules/twikit/client/client.html#Client.set_delegate_account)[](#twikit.client.client.Client.set_delegate_account "Link to this definition")

Sets the account to act as.

Parameters:

**user\_id** (`str` | None) – The user ID of the account to act as. Set to None to clear the delegated account.

_async_user\_id()→str[\[source\]](_modules/twikit/client/client.html#Client.user_id)[](#twikit.client.client.Client.user_id "Link to this definition")

Retrieves the user ID associated with the authenticated account.

_async_user()→[User](#twikit.user.User "twikit.user.User")[\[source\]](_modules/twikit/client/client.html#Client.user)[](#twikit.client.client.Client.user "Link to this definition")

Retrieve detailed information about the authenticated user.

_async_search\_tweet(_query:str_, _product:Literal\['Top','Latest','Media'\]_, _count:int\=20_, _cursor:str|None\=None_)→[Result](#twikit.utils.Result "twikit.utils.Result")\[[Tweet](#twikit.tweet.Tweet "twikit.tweet.Tweet")\][\[source\]](_modules/twikit/client/client.html#Client.search_tweet)[](#twikit.client.client.Client.search_tweet "Link to this definition")

Searches for tweets based on the specified query and product type.

Parameters:

*   **query** (`str`) – The search query.
    
*   **product** (_{'Top'__,_ _'Latest'__,_ _'Media'}_) – The type of tweets to retrieve.
    
*   **count** (`int`, default=20) – The number of tweets to retrieve, between 1 and 20.
    
*   **cursor** (`str`, default=20) – Token to retrieve more tweets.
    

Returns:

An instance of the Result class containing the search results.

Return type:

Result\[`Tweet`\]

Examples

\>>> tweets\=awaitclient.search\_tweet('query','Top')\>>> fortweetintweets:... print(tweet)<Tweet id="..."><Tweet id="...">......

\>>> more\_tweets\=awaittweets.next()\# Retrieve more tweets\>>> fortweetinmore\_tweets:... print(tweet)<Tweet id="..."><Tweet id="...">......

\>>> \# Retrieve previous tweets\>>> previous\_tweets\=awaittweets.previous()

_async_search\_user(_query:str_, _count:int\=20_, _cursor:str|None\=None_)→[Result](#twikit.utils.Result "twikit.utils.Result")\[[User](#twikit.user.User "twikit.user.User")\][\[source\]](_modules/twikit/client/client.html#Client.search_user)[](#twikit.client.client.Client.search_user "Link to this definition")

Searches for users based on the provided query.

Parameters:

*   **query** (`str`) – The search query for finding users.
    
*   **count** (`int`, default=20) – The number of users to retrieve in each request.
    
*   **cursor** (`str`, default=None) – Token to retrieve more users.
    

Returns:

An instance of the Result class containing the search results.

Return type:

Result\[`User`\]

Examples

\>>> result\=awaitclient.search\_user('query')\>>> foruserinresult:... print(user)<User id="..."><User id="...">......

\>>> more\_results\=awaitresult.next()\# Retrieve more search results\>>> foruserinmore\_results:... print(user)<User id="..."><User id="...">......

_async_get\_similar\_tweets(_tweet\_id:str_)→list\[[Tweet](#twikit.tweet.Tweet "twikit.tweet.Tweet")\][\[source\]](_modules/twikit/client/client.html#Client.get_similar_tweets)[](#twikit.client.client.Client.get_similar_tweets "Link to this definition")

Retrieves tweets similar to the specified tweet (Twitter premium only).

Parameters:

**tweet\_id** (`str`) – The ID of the tweet for which similar tweets are to be retrieved.

Returns:

A list of Tweet objects representing tweets similar to the specified tweet.

Return type:

list\[`Tweet`\]

_async_get\_user\_highlights\_tweets(_user\_id:str_, _count:int\=20_, _cursor:str|None\=None_)→[Result](#twikit.utils.Result "twikit.utils.Result")\[[Tweet](#twikit.tweet.Tweet "twikit.tweet.Tweet")\][\[source\]](_modules/twikit/client/client.html#Client.get_user_highlights_tweets)[](#twikit.client.client.Client.get_user_highlights_tweets "Link to this definition")

Retrieves highlighted tweets from a user’s timeline.

Parameters:

*   **user\_id** (`str`) – The user ID
    
*   **count** (`int`, default=20) – The number of tweets to retrieve.
    

Returns:

An instance of the Result class containing the highlighted tweets.

Return type:

Result\[`Tweet`\]

Examples

\>>> result\=awaitclient.get\_user\_highlights\_tweets('123456789')\>>> fortweetinresult:... print(tweet)<Tweet id="..."><Tweet id="...">......

\>>> more\_results\=awaitresult.next()\# Retrieve more highlighted tweets\>>> fortweetinmore\_results:... print(tweet)<Tweet id="..."><Tweet id="...">......

_async_upload\_media(_source:str|bytes_, _wait\_for\_completion:bool\=False_, _status\_check\_interval:float|None\=None_, _media\_type:str|None\=None_, _media\_category:str|None\=None_, _is\_long\_video:bool\=False_)→str[\[source\]](_modules/twikit/client/client.html#Client.upload_media)[](#twikit.client.client.Client.upload_media "Link to this definition")

Uploads media to twitter.

Parameters:

*   **source** (`str` | `bytes`) – The source of the media to be uploaded. It can be either a file path or bytes of the media content.
    
*   **wait\_for\_completion** (`bool`, default=False) – Whether to wait for the completion of the media upload process.
    
*   **status\_check\_interval** (`float`, default=1.0) – The interval (in seconds) to check the status of the media upload process.
    
*   **media\_type** (`str`, default=None) – The MIME type of the media. If not specified, it will be guessed from the source.
    
*   **media\_category** (`str`, default=None) – The media category.
    
*   **is\_long\_video** (`bool`, default=False) – If this is True, videos longer than 2:20 can be uploaded. (Twitter Premium only)
    

Returns:

The media ID of the uploaded media.

Return type:

`str`

Examples

Videos, images and gifs can be uploaded.

\>>> media\_id\_1\=awaitclient.upload\_media(... 'media1.jpg',... )

\>>> media\_id\_2\=awaitclient.upload\_media(... 'media2.mp4',... wait\_for\_completion\=True... )

\>>> media\_id\_3\=awaitclient.upload\_media(... 'media3.gif',... wait\_for\_completion\=True,... media\_category\='tweet\_gif'\# media\_category must be specified... )

_async_check\_media\_status(_media\_id:str_, _is\_long\_video:bool\=False_)→dict[\[source\]](_modules/twikit/client/client.html#Client.check_media_status)[](#twikit.client.client.Client.check_media_status "Link to this definition")

Check the status of uploaded media.

Parameters:

**media\_id** (`str`) – The media ID of the uploaded media.

Returns:

A dictionary containing information about the status of the uploaded media.

Return type:

dict

_async_create\_media\_metadata(_media\_id:str_, _alt\_text:str|None\=None_, _sensitive\_warning:list\[Literal\['adult\_content','graphic\_violence','other'\]\]\=None_)→Response[\[source\]](_modules/twikit/client/client.html#Client.create_media_metadata)[](#twikit.client.client.Client.create_media_metadata "Link to this definition")

Adds metadata to uploaded media.

Parameters:

*   **media\_id** (`str`) – The media id for which to create metadata.
    
*   **alt\_text** (`str` | None, default=None) – Alternative text for the media.
    
*   **sensitive\_warning** (_list{'adult\_content'__,_ _'graphic\_violence'__,_ _'other'}_) – A list of sensitive content warnings for the media.
    

Returns:

Response returned from twitter api.

Return type:

`httpx.Response`

Examples

\>>> media\_id\=awaitclient.upload\_media('media.jpg')\>>> awaitclient.create\_media\_metadata(... media\_id,... alt\_text\='This is a sample media',... sensitive\_warning\=\['other'\]... )\>>> awaitclient.create\_tweet(media\_ids\=\[media\_id\])

_async_create\_poll(_choices:list\[str\]_, _duration\_minutes:int_)→str[\[source\]](_modules/twikit/client/client.html#Client.create_poll)[](#twikit.client.client.Client.create_poll "Link to this definition")

Creates a poll and returns card-uri.

Parameters:

*   **choices** (list\[`str`\]) – A list of choices for the poll. Maximum of 4 choices.
    
*   **duration\_minutes** (`int`) – The duration of the poll in minutes.
    

Returns:

The URI of the created poll card.

Return type:

`str`

Examples

Create a poll with three choices lasting for 60 minutes:

\>>> choices\=\['Option A','Option B','Option C'\]\>>> duration\_minutes\=60\>>> card\_uri\=awaitclient.create\_poll(choices,duration\_minutes)\>>> print(card\_uri)'card://0000000000000000000'

_async_vote(_selected\_choice:str_, _card\_uri:str_, _tweet\_id:str_, _card\_name:str_)→[Poll](#twikit.tweet.Poll "twikit.tweet.Poll")[\[source\]](_modules/twikit/client/client.html#Client.vote)[](#twikit.client.client.Client.vote "Link to this definition")

Vote on a poll with the selected choice. :param selected\_choice: The label of the selected choice for the vote. :type selected\_choice: `str` :param card\_uri: The URI of the poll card. :type card\_uri: `str` :param tweet\_id: The ID of the original tweet containing the poll. :type tweet\_id: `str` :param card\_name: The name of the poll card. :type card\_name: `str`

Returns:

The Poll object representing the updated poll after voting.

Return type:

`Poll`

_async_create\_tweet(_text:str\=''_, _media\_ids:list\[str\]|None\=None_, _poll\_uri:str|None\=None_, _reply\_to:str|None\=None_, _conversation\_control:Literal\['followers','verified','mentioned'\]|None\=None_, _attachment\_url:str|None\=None_, _community\_id:str|None\=None_, _share\_with\_followers:bool\=False_, _is\_note\_tweet:bool\=False_, _richtext\_options:list\[dict\]\=None_, _edit\_tweet\_id:str|None\=None_)→[Tweet](#twikit.tweet.Tweet "twikit.tweet.Tweet")[\[source\]](_modules/twikit/client/client.html#Client.create_tweet)[](#twikit.client.client.Client.create_tweet "Link to this definition")

Creates a new tweet on Twitter with the specified text, media, and poll.

Parameters:

*   **text** (`str`, default=’’) – The text content of the tweet.
    
*   **media\_ids** (list\[`str`\], default=None) – A list of media IDs or URIs to attach to the tweet. media IDs can be obtained by using the upload\_media method.
    
*   **poll\_uri** (`str`, default=None) – The URI of a Twitter poll card to attach to the tweet. Poll URIs can be obtained by using the create\_poll method.
    
*   **reply\_to** (`str`, default=None) – The ID of the tweet to which this tweet is a reply.
    
*   **conversation\_control** (_{'followers'__,_ _'verified'__,_ _'mentioned'}_) – The type of conversation control for the tweet: - ‘followers’: Limits replies to followers only. - ‘verified’: Limits replies to verified accounts only. - ‘mentioned’: Limits replies to mentioned accounts only.
    
*   **attachment\_url** (`str`) – URL of the tweet to be quoted.
    
*   **is\_note\_tweet** (`bool`, default=False) – If this option is set to True, tweets longer than 280 characters can be posted (Twitter Premium only).
    
*   **richtext\_options** (list\[`dict`\], default=None) – Options for decorating text (Twitter Premium only).
    
*   **edit\_tweet\_id** (`str` | None, default=None) – ID of the tweet to edit (Twitter Premium only).
    

Raises:

[**DuplicateTweet**](#twikit.errors.DuplicateTweet "twikit.errors.DuplicateTweet") –

Returns:

The Created Tweet.

Return type:

`Tweet`

Examples

Create a tweet with media:

\>>> tweet\_text\='Example text'\>>> media\_ids\=\[... awaitclient.upload\_media('image1.png'),... awaitclient.upload\_media('image2.png')... \]\>>> awaitclient.create\_tweet(... tweet\_text,... media\_ids\=media\_ids... )

Create a tweet with a poll:

\>>> tweet\_text\='Example text'\>>> poll\_choices\=\['Option A','Option B','Option C'\]\>>> duration\_minutes\=60\>>> poll\_uri\=awaitclient.create\_poll(poll\_choices,duration\_minutes)\>>> awaitclient.create\_tweet(... tweet\_text,... poll\_uri\=poll\_uri... )

_async_create\_scheduled\_tweet(_scheduled\_at:int_, _text:str\=''_, _media\_ids:list\[str\]|None\=None_)→str[\[source\]](_modules/twikit/client/client.html#Client.create_scheduled_tweet)[](#twikit.client.client.Client.create_scheduled_tweet "Link to this definition")

Schedules a tweet to be posted at a specified timestamp.

Parameters:

*   **scheduled\_at** (`int`) – The timestamp when the tweet should be scheduled for posting.
    
*   **text** (`str`, default=’’) – The text content of the tweet, by default an empty string.
    
*   **media\_ids** (list\[`str`\], default=None) – A list of media IDs to be attached to the tweet, by default None.
    

Returns:

The ID of the scheduled tweet.

Return type:

`str`

Examples

Create a tweet with media:

\>>> scheduled\_time\=int(time.time())+3600\# One hour from now\>>> tweet\_text\='Example text'\>>> media\_ids\=\[... awaitclient.upload\_media('image1.png'),... awaitclient.upload\_media('image2.png')... \]\>>> awaitclient.create\_scheduled\_tweet(... scheduled\_time... tweet\_text,... media\_ids\=media\_ids... )

_async_delete\_tweet(_tweet\_id:str_)→Response[\[source\]](_modules/twikit/client/client.html#Client.delete_tweet)[](#twikit.client.client.Client.delete_tweet "Link to this definition")

Deletes a tweet.

Parameters:

**tweet\_id** (`str`) – ID of the tweet to be deleted.

Returns:

Response returned from twitter api.

Return type:

`httpx.Response`

Examples

\>>> tweet\_id\='0000000000'\>>> awaitdelete\_tweet(tweet\_id)

_async_get\_user\_by\_screen\_name(_screen\_name:str_)→[User](#twikit.user.User "twikit.user.User")[\[source\]](_modules/twikit/client/client.html#Client.get_user_by_screen_name)[](#twikit.client.client.Client.get_user_by_screen_name "Link to this definition")

Fetches a user by screen name.

### Parameter[](#parameter "Link to this heading")

screen\_name`str`

The screen name of the Twitter user.

returns:

An instance of the User class representing the Twitter user.

rtype:

`User`

Examples

\>>> target\_screen\_name\='example\_user'\>>> user\=awaitclient.get\_user\_by\_name(target\_screen\_name)\>>> print(user)<User id="...">

_async_get\_user\_by\_id(_user\_id:str_)→[User](#twikit.user.User "twikit.user.User")[\[source\]](_modules/twikit/client/client.html#Client.get_user_by_id)[](#twikit.client.client.Client.get_user_by_id "Link to this definition")

Fetches a user by ID

### Parameter[](#id1 "Link to this heading")

user\_id`str`

The ID of the Twitter user.

returns:

An instance of the User class representing the Twitter user.

rtype:

`User`

Examples

\>>> target\_screen\_name\='000000000'\>>> user\=awaitclient.get\_user\_by\_id(target\_screen\_name)\>>> print(user)<User id="000000000">

_async_reverse\_geocode(_lat:float_, _long:float_, _accuracy:str|float|None\=None_, _granularity:str|None\=None_, _max\_results:int|None\=None_)→list\[[Place](#twikit.geo.Place "twikit.geo.Place")\][\[source\]](_modules/twikit/client/client.html#Client.reverse_geocode)[](#twikit.client.client.Client.reverse_geocode "Link to this definition")

Given a latitude and a longitude, searches for up to 20 places that

Parameters:

*   **lat** (`float`) – The latitude to search around.
    
*   **long** (`float`) – The longitude to search around.
    
*   **accuracy** (`str` | `float` None, default=None) – A hint on the “region” in which to search.
    
*   **granularity** (`str` | None, default=None) – This is the minimal granularity of place types to return and must be one of: neighborhood, city, admin or country.
    
*   **max\_results** (`int` | None, default=None) – A hint as to the number of results to return.
    

Return type:

list\[[`Place`](#twikit.geo.Place "twikit.geo.Place")\]

_async_search\_geo(_lat:float|None\=None_, _long:float|None\=None_, _query:str|None\=None_, _ip:str|None\=None_, _granularity:str|None\=None_, _max\_results:int|None\=None_)→list\[[Place](#twikit.geo.Place "twikit.geo.Place")\][\[source\]](_modules/twikit/client/client.html#Client.search_geo)[](#twikit.client.client.Client.search_geo "Link to this definition")

Search for places that can be attached to a Tweet via POST statuses/update.

Parameters:

*   **lat** (`float` | None) – The latitude to search around.
    
*   **long** (`float` | None) – The longitude to search around.
    
*   **query** (`str` | None) – Free-form text to match against while executing a geo-based query, best suited for finding nearby locations by name. Remember to URL encode the query.
    
*   **ip** (`str` | None) – An IP address. Used when attempting to fix geolocation based off of the user’s IP address.
    
*   **granularity** (`str` | None) – This is the minimal granularity of place types to return and must be one of: neighborhood, city, admin or country.
    
*   **max\_results** (`int` | None) – A hint as to the number of results to return.
    

Return type:

list\[[`Place`](#twikit.geo.Place "twikit.geo.Place")\]

_async_get\_place(_id:str_)→[Place](#twikit.geo.Place "twikit.geo.Place")[\[source\]](_modules/twikit/client/client.html#Client.get_place)[](#twikit.client.client.Client.get_place "Link to this definition")

Parameters:

**id** (`str`) – The ID of the place.

Return type:

[`Place`](#twikit.geo.Place "twikit.geo.Place")

_async_get\_tweet\_by\_id(_tweet\_id:str_, _cursor:str|None\=None_)→[Tweet](#twikit.tweet.Tweet "twikit.tweet.Tweet")[\[source\]](_modules/twikit/client/client.html#Client.get_tweet_by_id)[](#twikit.client.client.Client.get_tweet_by_id "Link to this definition")

Fetches a tweet by tweet ID.

Parameters:

**tweet\_id** (`str`) – The ID of the tweet.

Returns:

A Tweet object representing the fetched tweet.

Return type:

`Tweet`

Examples

\>>> target\_tweet\_id\='...'\>>> tweet\=client.get\_tweet\_by\_id(target\_tweet\_id)\>>> print(tweet)<Tweet id="...">

_async_get\_tweets\_by\_ids(_ids:list\[str\]_)→list\[[Tweet](#twikit.tweet.Tweet "twikit.tweet.Tweet")\][\[source\]](_modules/twikit/client/client.html#Client.get_tweets_by_ids)[](#twikit.client.client.Client.get_tweets_by_ids "Link to this definition")

Retrieve multiple tweets by IDs.

Parameters:

**ids** (list\[`str`\]) – A list of tweet IDs to retrieve.

Returns:

List of tweets.

Return type:

list\[`Tweet`\]

Examples

\>>> tweet\_ids\=\['1111111111','1111111112','111111113'\]\>>> tweets\=awaitclient.get\_tweets\_by\_ids(tweet\_ids)\>>> print(tweets)\[<Tweet id="1111111111">, <Tweet id="1111111112">, <Tweet id="111111113">\]

_async_get\_scheduled\_tweets()→list\[ScheduledTweet\][\[source\]](_modules/twikit/client/client.html#Client.get_scheduled_tweets)[](#twikit.client.client.Client.get_scheduled_tweets "Link to this definition")

Retrieves scheduled tweets.

Returns:

List of ScheduledTweet objects representing the scheduled tweets.

Return type:

list\[`ScheduledTweet`\]

_async_delete\_scheduled\_tweet(_tweet\_id:str_)→Response[\[source\]](_modules/twikit/client/client.html#Client.delete_scheduled_tweet)[](#twikit.client.client.Client.delete_scheduled_tweet "Link to this definition")

Delete a scheduled tweet.

Parameters:

**tweet\_id** (`str`) – The ID of the scheduled tweet to delete.

Returns:

Response returned from twitter api.

Return type:

`httpx.Response`

_async_get\_retweeters(_tweet\_id:str_, _count:int\=40_, _cursor:str|None\=None_)→[Result](#twikit.utils.Result "twikit.utils.Result")\[[User](#twikit.user.User "twikit.user.User")\][\[source\]](_modules/twikit/client/client.html#Client.get_retweeters)[](#twikit.client.client.Client.get_retweeters "Link to this definition")

Retrieve users who retweeted a specific tweet.

Parameters:

*   **tweet\_id** (`str`) – The ID of the tweet.
    
*   **count** (`int`, default=40) – The maximum number of users to retrieve.
    
*   **cursor** (`str`, default=None) – A string indicating the position of the cursor for pagination.
    

Returns:

A list of users who retweeted the tweet.

Return type:

Result\[`User`\]

Examples

\>>> tweet\_id\='...'\>>> retweeters\=client.get\_retweeters(tweet\_id)\>>> print(retweeters)\[<User id="...">, <User id="...">, ..., <User id="...">\]

\>>> more\_retweeters\=retweeters.next()\# Retrieve more retweeters.\>>> print(more\_retweeters)\[<User id="...">, <User id="...">, ..., <User id="...">\]

_async_get\_favoriters(_tweet\_id:str_, _count:int\=40_, _cursor:str|None\=None_)→[Result](#twikit.utils.Result "twikit.utils.Result")\[[User](#twikit.user.User "twikit.user.User")\][\[source\]](_modules/twikit/client/client.html#Client.get_favoriters)[](#twikit.client.client.Client.get_favoriters "Link to this definition")

Retrieve users who favorited a specific tweet.

Parameters:

*   **tweet\_id** (`str`) – The ID of the tweet.
    
*   **count** (_int__,_ _default=40_) – The maximum number of users to retrieve.
    
*   **cursor** (`str`, default=None) – A string indicating the position of the cursor for pagination.
    

Returns:

A list of users who favorited the tweet.

Return type:

Result\[`User`\]

Examples

\>>> tweet\_id\='...'\>>> favoriters\=awaitclient.get\_favoriters(tweet\_id)\>>> print(favoriters)\[<User id="...">, <User id="...">, ..., <User id="...">\]

\>>> \# Retrieve more favoriters.\>>> more\_favoriters\=awaitfavoriters.next()\>>> print(more\_favoriters)\[<User id="...">, <User id="...">, ..., <User id="...">\]

Fetches a community note by ID.

Parameters:

**note\_id** (`str`) – The ID of the community note.

Returns:

A CommunityNote object representing the fetched community note.

Return type:

`CommunityNote`

Raises:

[**TwitterException**](#twikit.errors.TwitterException "twikit.errors.TwitterException") – Invalid note ID.

Examples

\>>> note\_id\='...'\>>> note\=client.get\_community\_note(note\_id)\>>> print(note)<CommunityNote id="...">

_async_get\_user\_tweets(_user\_id:str_, _tweet\_type:Literal\['Tweets','Replies','Media','Likes'\]_, _count:int\=40_, _cursor:str|None\=None_)→[Result](#twikit.utils.Result "twikit.utils.Result")\[[Tweet](#twikit.tweet.Tweet "twikit.tweet.Tweet")\][\[source\]](_modules/twikit/client/client.html#Client.get_user_tweets)[](#twikit.client.client.Client.get_user_tweets "Link to this definition")

Fetches tweets from a specific user’s timeline.

Parameters:

*   **user\_id** (`str`) – The ID of the Twitter user whose tweets to retrieve. To get the user id from the screen name, you can use get\_user\_by\_screen\_name method.
    
*   **tweet\_type** (_{'Tweets'__,_ _'Replies'__,_ _'Media'__,_ _'Likes'}_) – The type of tweets to retrieve.
    
*   **count** (`int`, default=40) – The number of tweets to retrieve.
    
*   **cursor** (`str`, default=None) – The cursor for fetching the next set of results.
    

Returns:

A Result object containing a list of Tweet objects.

Return type:

Result\[`Tweet`\]

Examples

If you only have the screen name, you can get the user id as follows:

\>>> screen\_name\='example\_user'\>>> user\=client.get\_user\_by\_screen\_name(screen\_name)\>>> user\_id\=user.id

\>>> tweets\=awaitclient.get\_user\_tweets(user\_id,'Tweets',count\=20)\>>> fortweetintweets:... print(tweet)<Tweet id="..."><Tweet id="...">......

\>>> more\_tweets\=awaittweets.next()\# Retrieve more tweets\>>> fortweetinmore\_tweets:... print(tweet)<Tweet id="..."><Tweet id="...">......

\>>> \# Retrieve previous tweets\>>> previous\_tweets\=awaittweets.previous()

_async_get\_timeline(_count:int\=20_, _seen\_tweet\_ids:list\[str\]|None\=None_, _cursor:str|None\=None_)→[Result](#twikit.utils.Result "twikit.utils.Result")\[[Tweet](#twikit.tweet.Tweet "twikit.tweet.Tweet")\][\[source\]](_modules/twikit/client/client.html#Client.get_timeline)[](#twikit.client.client.Client.get_timeline "Link to this definition")

Retrieves the timeline. Retrieves tweets from Home -> For You.

Parameters:

*   **count** (`int`, default=20) – The number of tweets to retrieve.
    
*   **seen\_tweet\_ids** (list\[`str`\], default=None) – A list of tweet IDs that have been seen.
    
*   **cursor** (`str`, default=None) – A cursor for pagination.
    

Returns:

A Result object containing a list of Tweet objects.

Return type:

Result\[`Tweet`\]

Example

\>>> tweets\=awaitclient.get\_timeline()\>>> fortweetintweets:... print(tweet)<Tweet id="..."><Tweet id="...">......\>>> more\_tweets\=awaittweets.next()\# Retrieve more tweets\>>> fortweetinmore\_tweets:... print(tweet)<Tweet id="..."><Tweet id="...">......

_async_get\_latest\_timeline(_count:int\=20_, _seen\_tweet\_ids:list\[str\]|None\=None_, _cursor:str|None\=None_)→[Result](#twikit.utils.Result "twikit.utils.Result")\[[Tweet](#twikit.tweet.Tweet "twikit.tweet.Tweet")\][\[source\]](_modules/twikit/client/client.html#Client.get_latest_timeline)[](#twikit.client.client.Client.get_latest_timeline "Link to this definition")

Retrieves the timeline. Retrieves tweets from Home -> Following.

Parameters:

*   **count** (`int`, default=20) – The number of tweets to retrieve.
    
*   **seen\_tweet\_ids** (list\[`str`\], default=None) – A list of tweet IDs that have been seen.
    
*   **cursor** (`str`, default=None) – A cursor for pagination.
    

Returns:

A Result object containing a list of Tweet objects.

Return type:

Result\[`Tweet`\]

Example

\>>> tweets\=awaitclient.get\_latest\_timeline()\>>> fortweetintweets:... print(tweet)<Tweet id="..."><Tweet id="...">......\>>> more\_tweets\=awaittweets.next()\# Retrieve more tweets\>>> fortweetinmore\_tweets:... print(tweet)<Tweet id="..."><Tweet id="...">......

_async_favorite\_tweet(_tweet\_id:str_)→Response[\[source\]](_modules/twikit/client/client.html#Client.favorite_tweet)[](#twikit.client.client.Client.favorite_tweet "Link to this definition")

Favorites a tweet.

Parameters:

**tweet\_id** (`str`) – The ID of the tweet to be liked.

Returns:

Response returned from twitter api.

Return type:

`httpx.Response`

Examples

\>>> tweet\_id\='...'\>>> awaitclient.favorite\_tweet(tweet\_id)

See also

[`unfavorite_tweet`](#twikit.client.client.Client.unfavorite_tweet "twikit.client.client.Client.unfavorite_tweet")

_async_unfavorite\_tweet(_tweet\_id:str_)→Response[\[source\]](_modules/twikit/client/client.html#Client.unfavorite_tweet)[](#twikit.client.client.Client.unfavorite_tweet "Link to this definition")

Unfavorites a tweet.

Parameters:

**tweet\_id** (`str`) – The ID of the tweet to be unliked.

Returns:

Response returned from twitter api.

Return type:

`httpx.Response`

Examples

\>>> tweet\_id\='...'\>>> awaitclient.unfavorite\_tweet(tweet\_id)

_async_retweet(_tweet\_id:str_)→Response[\[source\]](_modules/twikit/client/client.html#Client.retweet)[](#twikit.client.client.Client.retweet "Link to this definition")

Retweets a tweet.

Parameters:

**tweet\_id** (`str`) – The ID of the tweet to be retweeted.

Returns:

Response returned from twitter api.

Return type:

`httpx.Response`

Examples

\>>> tweet\_id\='...'\>>> awaitclient.retweet(tweet\_id)

_async_delete\_retweet(_tweet\_id:str_)→Response[\[source\]](_modules/twikit/client/client.html#Client.delete_retweet)[](#twikit.client.client.Client.delete_retweet "Link to this definition")

Deletes the retweet.

Parameters:

**tweet\_id** (`str`) – The ID of the retweeted tweet to be unretweeted.

Returns:

Response returned from twitter api.

Return type:

`httpx.Response`

Examples

\>>> tweet\_id\='...'\>>> awaitclient.delete\_retweet(tweet\_id)

_async_bookmark\_tweet(_tweet\_id:str_, _folder\_id:str|None\=None_)→Response[\[source\]](_modules/twikit/client/client.html#Client.bookmark_tweet)[](#twikit.client.client.Client.bookmark_tweet "Link to this definition")

Adds the tweet to bookmarks.

Parameters:

*   **tweet\_id** (`str`) – The ID of the tweet to be bookmarked.
    
*   **folder\_id** (`str` | None, default=None) – The ID of the folder to add the bookmark to.
    

Returns:

Response returned from twitter api.

Return type:

`httpx.Response`

Examples

\>>> tweet\_id\='...'\>>> awaitclient.bookmark\_tweet(tweet\_id)

_async_delete\_bookmark(_tweet\_id:str_)→Response[\[source\]](_modules/twikit/client/client.html#Client.delete_bookmark)[](#twikit.client.client.Client.delete_bookmark "Link to this definition")

Removes the tweet from bookmarks.

Parameters:

**tweet\_id** (`str`) – The ID of the tweet to be removed from bookmarks.

Returns:

Response returned from twitter api.

Return type:

`httpx.Response`

Examples

\>>> tweet\_id\='...'\>>> awaitclient.delete\_bookmark(tweet\_id)

_async_get\_bookmarks(_count:int\=20_, _cursor:str|None\=None_, _folder\_id:str|None\=None_)→[Result](#twikit.utils.Result "twikit.utils.Result")\[[Tweet](#twikit.tweet.Tweet "twikit.tweet.Tweet")\][\[source\]](_modules/twikit/client/client.html#Client.get_bookmarks)[](#twikit.client.client.Client.get_bookmarks "Link to this definition")

Retrieves bookmarks from the authenticated user’s Twitter account.

Parameters:

*   **count** (`int`, default=20) – The number of bookmarks to retrieve.
    
*   **folder\_id** (`str` | None, default=None) – Folder to retrieve bookmarks.
    

Returns:

A Result object containing a list of Tweet objects representing bookmarks.

Return type:

Result\[`Tweet`\]

Example

\>>> bookmarks\=awaitclient.get\_bookmarks()\>>> forbookmarkinbookmarks:... print(bookmark)<Tweet id="..."><Tweet id="...">

\>>> \# # To retrieve more bookmarks\>>> more\_bookmarks\=awaitbookmarks.next()\>>> forbookmarkinmore\_bookmarks:... print(bookmark)<Tweet id="..."><Tweet id="...">

_async_delete\_all\_bookmarks()→Response[\[source\]](_modules/twikit/client/client.html#Client.delete_all_bookmarks)[](#twikit.client.client.Client.delete_all_bookmarks "Link to this definition")

Deleted all bookmarks.

Returns:

Response returned from twitter api.

Return type:

`httpx.Response`

Examples

\>>> awaitclient.delete\_all\_bookmarks()

_async_get\_bookmark\_folders(_cursor:str|None\=None_)→[Result](#twikit.utils.Result "twikit.utils.Result")\[BookmarkFolder\][\[source\]](_modules/twikit/client/client.html#Client.get_bookmark_folders)[](#twikit.client.client.Client.get_bookmark_folders "Link to this definition")

Retrieves bookmark folders.

Returns:

Result object containing a list of bookmark folders.

Return type:

Result\[`BookmarkFolder`\]

Examples

\>>> folders\=awaitclient.get\_bookmark\_folders()\>>> print(folders)\[<BookmarkFolder id="...">, ..., <BookmarkFolder id="...">\]\>>> more\_folders\=awaitfolders.next()\# Retrieve more folders

_async_edit\_bookmark\_folder(_folder\_id:str_, _name:str_)→BookmarkFolder[\[source\]](_modules/twikit/client/client.html#Client.edit_bookmark_folder)[](#twikit.client.client.Client.edit_bookmark_folder "Link to this definition")

Edits a bookmark folder.

Parameters:

*   **folder\_id** (`str`) – ID of the folder to edit.
    
*   **name** (`str`) – New name for the folder.
    

Returns:

Updated bookmark folder.

Return type:

`BookmarkFolder`

Examples

\>>> awaitclient.edit\_bookmark\_folder('123456789','MyFolder')

_async_delete\_bookmark\_folder(_folder\_id:str_)→Response[\[source\]](_modules/twikit/client/client.html#Client.delete_bookmark_folder)[](#twikit.client.client.Client.delete_bookmark_folder "Link to this definition")

Deletes a bookmark folder.

Parameters:

**folder\_id** (`str`) – ID of the folder to delete.

Returns:

Response returned from twitter api.

Return type:

`httpx.Response`

_async_create\_bookmark\_folder(_name:str_)→BookmarkFolder[\[source\]](_modules/twikit/client/client.html#Client.create_bookmark_folder)[](#twikit.client.client.Client.create_bookmark_folder "Link to this definition")

Creates a bookmark folder.

Parameters:

**name** (`str`) – Name of the folder.

Returns:

Newly created bookmark folder.

Return type:

`BookmarkFolder`

_async_follow\_user(_user\_id:str_)→[User](#twikit.user.User "twikit.user.User")[\[source\]](_modules/twikit/client/client.html#Client.follow_user)[](#twikit.client.client.Client.follow_user "Link to this definition")

Follows a user.

Parameters:

**user\_id** (`str`) – The ID of the user to follow.

Returns:

The followed user.

Return type:

`User`

Examples

\>>> user\_id\='...'\>>> awaitclient.follow\_user(user\_id)

_async_unfollow\_user(_user\_id:str_)→[User](#twikit.user.User "twikit.user.User")[\[source\]](_modules/twikit/client/client.html#Client.unfollow_user)[](#twikit.client.client.Client.unfollow_user "Link to this definition")

Unfollows a user.

Parameters:

**user\_id** (`str`) – The ID of the user to unfollow.

Returns:

The unfollowed user.

Return type:

`User`

Examples

\>>> user\_id\='...'\>>> awaitclient.unfollow\_user(user\_id)

_async_block\_user(_user\_id:str_)→[User](#twikit.user.User "twikit.user.User")[\[source\]](_modules/twikit/client/client.html#Client.block_user)[](#twikit.client.client.Client.block_user "Link to this definition")

Blocks a user.

Parameters:

**user\_id** (`str`) – The ID of the user to block.

Returns:

The blocked user.

Return type:

`User`

_async_unblock\_user(_user\_id:str_)→[User](#twikit.user.User "twikit.user.User")[\[source\]](_modules/twikit/client/client.html#Client.unblock_user)[](#twikit.client.client.Client.unblock_user "Link to this definition")

Unblocks a user.

Parameters:

**user\_id** (`str`) – The ID of the user to unblock.

Returns:

The unblocked user.

Return type:

`User`

_async_mute\_user(_user\_id:str_)→[User](#twikit.user.User "twikit.user.User")[\[source\]](_modules/twikit/client/client.html#Client.mute_user)[](#twikit.client.client.Client.mute_user "Link to this definition")

Mutes a user.

Parameters:

**user\_id** (`str`) – The ID of the user to mute.

Returns:

The muted user.

Return type:

`User`

_async_unmute\_user(_user\_id:str_)→[User](#twikit.user.User "twikit.user.User")[\[source\]](_modules/twikit/client/client.html#Client.unmute_user)[](#twikit.client.client.Client.unmute_user "Link to this definition")

Unmutes a user.

Parameters:

**user\_id** (`str`) – The ID of the user to unmute.

Returns:

The unmuted user.

Return type:

`User`

_async_get\_trends(_category:Literal\['trending','for-you','news','sports','entertainment'\]_, _count:int\=20_, _retry:bool\=True_, _additional\_request\_params:dict|None\=None_)→list\[[Trend](#twikit.trend.Trend "twikit.trend.Trend")\][\[source\]](_modules/twikit/client/client.html#Client.get_trends)[](#twikit.client.client.Client.get_trends "Link to this definition")

Retrieves trending topics on Twitter.

Parameters:

*   **category** (_{'trending'__,_ _'for-you'__,_ _'news'__,_ _'sports'__,_ _'entertainment'}_) – The category of trends to retrieve. Valid options include: - ‘trending’: General trending topics. - ‘for-you’: Trends personalized for the user. - ‘news’: News-related trends. - ‘sports’: Sports-related trends. - ‘entertainment’: Entertainment-related trends.
    
*   **count** (`int`, default=20) – The number of trends to retrieve.
    
*   **retry** (`bool`, default=True) – If no trends are fetched continuously retry to fetch trends.
    
*   **additional\_request\_params** (`dict`, default=None) – Parameters to be added on top of the existing trends API parameters. Typically, it is used as additional\_request\_params = {‘candidate\_source’: ‘trends’} when this function doesn’t work otherwise.
    

Returns:

A list of Trend objects representing the retrieved trends.

Return type:

list\[`Trend`\]

Examples

\>>> trends\=awaitclient.get\_trends('trending')\>>> fortrendintrends:... print(trend)<Trend name="..."><Trend name="...">...

_async_get\_available\_locations()→list\[[Location](#twikit.trend.Location "twikit.trend.Location")\][\[source\]](_modules/twikit/client/client.html#Client.get_available_locations)[](#twikit.client.client.Client.get_available_locations "Link to this definition")

Retrieves locations where trends can be retrieved.

Return type:

list\[[`Location`](#twikit.trend.Location "twikit.trend.Location")\]

_async_get\_place\_trends(_woeid:int_)→[PlaceTrends](#twikit.trend.PlaceTrends "twikit.trend.PlaceTrends")[\[source\]](_modules/twikit/client/client.html#Client.get_place_trends)[](#twikit.client.client.Client.get_place_trends "Link to this definition")

Retrieves the top 50 trending topics for a specific id. You can get available woeid using [`Client.get_available_locations`](#twikit.client.client.Client.get_available_locations "twikit.client.client.Client.get_available_locations").

_async_get\_user\_followers(_user\_id:str_, _count:int\=20_, _cursor:str|None\=None_)→[Result](#twikit.utils.Result "twikit.utils.Result")\[[User](#twikit.user.User "twikit.user.User")\][\[source\]](_modules/twikit/client/client.html#Client.get_user_followers)[](#twikit.client.client.Client.get_user_followers "Link to this definition")

Retrieves a list of followers for a given user.

Parameters:

*   **user\_id** (`str`) – The ID of the user for whom to retrieve followers.
    
*   **count** (_int__,_ _default=20_) – The number of followers to retrieve.
    

Returns:

A list of User objects representing the followers.

Return type:

Result\[`User`\]

_async_get\_latest\_followers(_user\_id:str|None\=None_, _screen\_name:str|None\=None_, _count:int\=200_, _cursor:str|None\=None_)→[Result](#twikit.utils.Result "twikit.utils.Result")\[[User](#twikit.user.User "twikit.user.User")\][\[source\]](_modules/twikit/client/client.html#Client.get_latest_followers)[](#twikit.client.client.Client.get_latest_followers "Link to this definition")

Retrieves the latest followers. Max count : 200

_async_get\_latest\_friends(_user\_id:str|None\=None_, _screen\_name:str|None\=None_, _count:int\=200_, _cursor:str|None\=None_)→[Result](#twikit.utils.Result "twikit.utils.Result")\[[User](#twikit.user.User "twikit.user.User")\][\[source\]](_modules/twikit/client/client.html#Client.get_latest_friends)[](#twikit.client.client.Client.get_latest_friends "Link to this definition")

Retrieves the latest friends (following users). Max count : 200

_async_get\_user\_verified\_followers(_user\_id:str_, _count:int\=20_, _cursor:str|None\=None_)→[Result](#twikit.utils.Result "twikit.utils.Result")\[[User](#twikit.user.User "twikit.user.User")\][\[source\]](_modules/twikit/client/client.html#Client.get_user_verified_followers)[](#twikit.client.client.Client.get_user_verified_followers "Link to this definition")

Retrieves a list of verified followers for a given user.

Parameters:

*   **user\_id** (`str`) – The ID of the user for whom to retrieve verified followers.
    
*   **count** (`int`, default=20) – The number of verified followers to retrieve.
    

Returns:

A list of User objects representing the verified followers.

Return type:

Result\[`User`\]

_async_get\_user\_followers\_you\_know(_user\_id:str_, _count:int\=20_, _cursor:str|None\=None_)→[Result](#twikit.utils.Result "twikit.utils.Result")\[[User](#twikit.user.User "twikit.user.User")\][\[source\]](_modules/twikit/client/client.html#Client.get_user_followers_you_know)[](#twikit.client.client.Client.get_user_followers_you_know "Link to this definition")

Retrieves a list of common followers.

Parameters:

*   **user\_id** (`str`) – The ID of the user for whom to retrieve followers you might know.
    
*   **count** (`int`, default=20) – The number of followers you might know to retrieve.
    

Returns:

A list of User objects representing the followers you might know.

Return type:

Result\[`User`\]

_async_get\_user\_following(_user\_id:str_, _count:int\=20_, _cursor:str|None\=None_)→[Result](#twikit.utils.Result "twikit.utils.Result")\[[User](#twikit.user.User "twikit.user.User")\][\[source\]](_modules/twikit/client/client.html#Client.get_user_following)[](#twikit.client.client.Client.get_user_following "Link to this definition")

Retrieves a list of users whom the given user is following.

Parameters:

*   **user\_id** (`str`) – The ID of the user for whom to retrieve the following users.
    
*   **count** (`int`, default=20) – The number of following users to retrieve.
    

Returns:

A list of User objects representing the users being followed.

Return type:

Result\[`User`\]

_async_get\_user\_subscriptions(_user\_id:str_, _count:int\=20_, _cursor:str|None\=None_)→[Result](#twikit.utils.Result "twikit.utils.Result")\[[User](#twikit.user.User "twikit.user.User")\][\[source\]](_modules/twikit/client/client.html#Client.get_user_subscriptions)[](#twikit.client.client.Client.get_user_subscriptions "Link to this definition")

Retrieves a list of users to which the specified user is subscribed.

Parameters:

*   **user\_id** (`str`) – The ID of the user for whom to retrieve subscriptions.
    
*   **count** (`int`, default=20) – The number of subscriptions to retrieve.
    

Returns:

A list of User objects representing the subscribed users.

Return type:

Result\[`User`\]

_async_get\_followers\_ids(_user\_id:str|None\=None_, _screen\_name:str|None\=None_, _count:int\=5000_, _cursor:str|None\=None_)→[Result](#twikit.utils.Result "twikit.utils.Result")\[int\][\[source\]](_modules/twikit/client/client.html#Client.get_followers_ids)[](#twikit.client.client.Client.get_followers_ids "Link to this definition")

Fetches the IDs of the followers of a specified user.

Parameters:

*   **user\_id** (`str` | None, default=None) – The ID of the user for whom to return results.
    
*   **screen\_name** (`str` | None, default=None) – The screen name of the user for whom to return results.
    
*   **count** (`int`, default=5000) – The maximum number of IDs to retrieve.
    

Returns:

A Result object containing the IDs of the followers.

Return type:

``Result`[:class:`int``\]

_async_get\_friends\_ids(_user\_id:str|None\=None_, _screen\_name:str|None\=None_, _count:int\=5000_, _cursor:str|None\=None_)→[Result](#twikit.utils.Result "twikit.utils.Result")\[int\][\[source\]](_modules/twikit/client/client.html#Client.get_friends_ids)[](#twikit.client.client.Client.get_friends_ids "Link to this definition")

Fetches the IDs of the friends (following users) of a specified user.

Parameters:

*   **user\_id** (`str` | None, default=None) – The ID of the user for whom to return results.
    
*   **screen\_name** (`str` | None, default=None) – The screen name of the user for whom to return results.
    
*   **count** (`int`, default=5000) – The maximum number of IDs to retrieve.
    

Returns:

A Result object containing the IDs of the friends.

Return type:

``Result`[:class:`int``\]

_async_send\_dm(_user\_id:str_, _text:str_, _media\_id:str|None\=None_, _reply\_to:str|None\=None_)→[Message](#twikit.message.Message "twikit.message.Message")[\[source\]](_modules/twikit/client/client.html#Client.send_dm)[](#twikit.client.client.Client.send_dm "Link to this definition")

Send a direct message to a user.

Parameters:

*   **user\_id** (`str`) – The ID of the user to whom the direct message will be sent.
    
*   **text** (`str`) – The text content of the direct message.
    
*   **media\_id** (`str`, default=None) – The media ID associated with any media content to be included in the message. Media ID can be received by using the `upload_media()` method.
    
*   **reply\_to** (`str`, default=None) – Message ID to reply to.
    

Returns:

Message object containing information about the message sent.

Return type:

`Message`

Examples

\>>> \# send DM with media\>>> user\_id\='000000000'\>>> media\_id\=awaitclient.upload\_media('image.png')\>>> message\=awaitclient.send\_dm(user\_id,'text',media\_id)\>>> print(message)<Message id='...'>

See also

[`upload_media`](#twikit.client.client.Client.upload_media "twikit.client.client.Client.upload_media"), [`delete_dm`](#twikit.client.client.Client.delete_dm "twikit.client.client.Client.delete_dm")

_async_add\_reaction\_to\_message(_message\_id:str_, _conversation\_id:str_, _emoji:str_)→Response[\[source\]](_modules/twikit/client/client.html#Client.add_reaction_to_message)[](#twikit.client.client.Client.add_reaction_to_message "Link to this definition")

Adds a reaction emoji to a specific message in a conversation.

Parameters:

*   **message\_id** (`str`) – The ID of the message to which the reaction emoji will be added. Group ID (‘00000000’) or partner\_ID-your\_ID (‘00000000-00000001’)
    
*   **conversation\_id** (`str`) – The ID of the conversation containing the message.
    
*   **emoji** (`str`) – The emoji to be added as a reaction.
    

Returns:

Response returned from twitter api.

Return type:

`httpx.Response`

Examples

\>>> message\_id\='00000000'\>>> conversation\_id\=f'00000001-{awaitclient.user\_id()}'\>>> awaitclient.add\_reaction\_to\_message(... message\_id,conversation\_id,'Emoji here'... )

_async_remove\_reaction\_from\_message(_message\_id:str_, _conversation\_id:str_, _emoji:str_)→Response[\[source\]](_modules/twikit/client/client.html#Client.remove_reaction_from_message)[](#twikit.client.client.Client.remove_reaction_from_message "Link to this definition")

Remove a reaction from a message.

Parameters:

*   **message\_id** (`str`) – The ID of the message from which to remove the reaction.
    
*   **conversation\_id** (`str`) – The ID of the conversation where the message is located. Group ID (‘00000000’) or partner\_ID-your\_ID (‘00000000-00000001’)
    
*   **emoji** (`str`) – The emoji to remove as a reaction.
    

Returns:

Response returned from twitter api.

Return type:

`httpx.Response`

Examples

\>>> message\_id\='00000000'\>>> conversation\_id\=f'00000001-{awaitclient.user\_id()}'\>>> awaitclient.remove\_reaction\_from\_message(... message\_id,conversation\_id,'Emoji here'... )

_async_delete\_dm(_message\_id:str_)→Response[\[source\]](_modules/twikit/client/client.html#Client.delete_dm)[](#twikit.client.client.Client.delete_dm "Link to this definition")

Deletes a direct message with the specified message ID.

Parameters:

**message\_id** (`str`) – The ID of the direct message to be deleted.

Returns:

Response returned from twitter api.

Return type:

`httpx.Response`

Examples

\>>> awaitclient.delete\_dm('0000000000')

_async_get\_dm\_history(_user\_id:str_, _max\_id:str|None\=None_)→[Result](#twikit.utils.Result "twikit.utils.Result")\[[Message](#twikit.message.Message "twikit.message.Message")\][\[source\]](_modules/twikit/client/client.html#Client.get_dm_history)[](#twikit.client.client.Client.get_dm_history "Link to this definition")

Retrieves the DM conversation history with a specific user.

Parameters:

*   **user\_id** (`str`) – The ID of the user with whom the DM conversation history will be retrieved.
    
*   **max\_id** (`str`, default=None) – If specified, retrieves messages older than the specified max\_id.
    

Returns:

A Result object containing a list of Message objects representing the DM conversation history.

Return type:

Result\[`Message`\]

Examples

\>>> messages\=awaitclient.get\_dm\_history('0000000000')\>>> formessageinmessages:\>>> print(message)<Message id="..."><Message id="...">......

\>>> more\_messages\=awaitmessages.next()\# Retrieve more messages\>>> formessageinmore\_messages:\>>> print(message)<Message id="..."><Message id="...">......

_async_send\_dm\_to\_group(_group\_id:str_, _text:str_, _media\_id:str|None\=None_, _reply\_to:str|None\=None_)→GroupMessage[\[source\]](_modules/twikit/client/client.html#Client.send_dm_to_group)[](#twikit.client.client.Client.send_dm_to_group "Link to this definition")

Sends a message to a group.

Parameters:

*   **group\_id** (`str`) – The ID of the group in which the direct message will be sent.
    
*   **text** (`str`) – The text content of the direct message.
    
*   **media\_id** (`str`, default=None) – The media ID associated with any media content to be included in the message. Media ID can be received by using the `upload_media()` method.
    
*   **reply\_to** (`str`, default=None) – Message ID to reply to.
    

Returns:

GroupMessage object containing information about the message sent.

Return type:

`GroupMessage`

Examples

\>>> \# send DM with media\>>> group\_id\='000000000'\>>> media\_id\=awaitclient.upload\_media('image.png')\>>> message\=awaitclient.send\_dm\_to\_group(group\_id,'text',media\_id)\>>> print(message)<GroupMessage id='...'>

See also

[`upload_media`](#twikit.client.client.Client.upload_media "twikit.client.client.Client.upload_media"), [`delete_dm`](#twikit.client.client.Client.delete_dm "twikit.client.client.Client.delete_dm")

_async_get\_group\_dm\_history(_group\_id:str_, _max\_id:str|None\=None_)→[Result](#twikit.utils.Result "twikit.utils.Result")\[GroupMessage\][\[source\]](_modules/twikit/client/client.html#Client.get_group_dm_history)[](#twikit.client.client.Client.get_group_dm_history "Link to this definition")

Retrieves the DM conversation history in a group.

Parameters:

*   **group\_id** (`str`) – The ID of the group in which the DM conversation history will be retrieved.
    
*   **max\_id** (`str`, default=None) – If specified, retrieves messages older than the specified max\_id.
    

Returns:

A Result object containing a list of GroupMessage objects representing the DM conversation history.

Return type:

Result\[`GroupMessage`\]

Examples

\>>> messages\=awaitclient.get\_group\_dm\_history('0000000000')\>>> formessageinmessages:\>>> print(message)<GroupMessage id="..."><GroupMessage id="...">......

\>>> more\_messages\=awaitmessages.next()\# Retrieve more messages\>>> formessageinmore\_messages:\>>> print(message)<GroupMessage id="..."><GroupMessage id="...">......

_async_get\_group(_group\_id:str_)→Group[\[source\]](_modules/twikit/client/client.html#Client.get_group)[](#twikit.client.client.Client.get_group "Link to this definition")

Fetches a guild by ID.

Parameters:

**group\_id** (`str`) – The ID of the group to retrieve information for.

Returns:

An object representing the retrieved group.

Return type:

`Group`

_async_add\_members\_to\_group(_group\_id:str_, _user\_ids:list\[str\]_)→Response[\[source\]](_modules/twikit/client/client.html#Client.add_members_to_group)[](#twikit.client.client.Client.add_members_to_group "Link to this definition")

Adds members to a group.

Parameters:

*   **group\_id** (`str`) – ID of the group to which the member is to be added.
    
*   **user\_ids** (list\[`str`\]) – List of IDs of users to be added.
    

Returns:

Response returned from twitter api.

Return type:

`httpx.Response`

Examples

\>>> group\_id\='...'\>>> members\=\['...'\]\>>> awaitclient.add\_members\_to\_group(group\_id,members)

_async_change\_group\_name(_group\_id:str_, _name:str_)→Response[\[source\]](_modules/twikit/client/client.html#Client.change_group_name)[](#twikit.client.client.Client.change_group_name "Link to this definition")

Changes group name

Parameters:

*   **group\_id** (`str`) – ID of the group to be renamed.
    
*   **name** (`str`) – New name.
    

Returns:

Response returned from twitter api.

Return type:

`httpx.Response`

_async_create\_list(_name:str_, _description:str\=''_, _is\_private:bool\=False_)→[List](#twikit.list.List "twikit.list.List")[\[source\]](_modules/twikit/client/client.html#Client.create_list)[](#twikit.client.client.Client.create_list "Link to this definition")

Creates a list.

Parameters:

*   **name** (`str`) – The name of the list.
    
*   **description** (`str`, default=’’) – The description of the list.
    
*   **is\_private** (`bool`, default=False) – Indicates whether the list is private (True) or public (False).
    

Returns:

The created list.

Return type:

`List`

Examples

\>>> list\=awaitclient.create\_list(... 'list name',... 'list description',... is\_private\=True... )\>>> print(list)<List id="...">

Edit the banner image of a list.

Parameters:

*   **list\_id** (`str`) – The ID of the list.
    
*   **media\_id** (`str`) – The ID of the media to use as the new banner image.
    

Returns:

Response returned from twitter api.

Return type:

`httpx.Response`

Examples

\>>> list\_id\='...'\>>> media\_id\=awaitclient.upload\_media('image.png')\>>> awaitclient.edit\_list\_banner(list\_id,media\_id)

Deletes list banner.

Parameters:

**list\_id** (`str`) – ID of the list from which the banner is to be removed.

Returns:

Response returned from twitter api.

Return type:

`httpx.Response`

_async_edit\_list(_list\_id:str_, _name:str|None\=None_, _description:str|None\=None_, _is\_private:bool|None\=None_)→[List](#twikit.list.List "twikit.list.List")[\[source\]](_modules/twikit/client/client.html#Client.edit_list)[](#twikit.client.client.Client.edit_list "Link to this definition")

Edits list information.

Parameters:

*   **list\_id** (`str`) – The ID of the list to edit.
    
*   **name** (`str`, default=None) – The new name for the list.
    
*   **description** (`str`, default=None) – The new description for the list.
    
*   **is\_private** (`bool`, default=None) – Indicates whether the list should be private (True) or public (False).
    

Returns:

The updated Twitter list.

Return type:

`List`

Examples

\>>> awaitclient.edit\_list(... 'new name','new description',True... )

_async_add\_list\_member(_list\_id:str_, _user\_id:str_)→[List](#twikit.list.List "twikit.list.List")[\[source\]](_modules/twikit/client/client.html#Client.add_list_member)[](#twikit.client.client.Client.add_list_member "Link to this definition")

Adds a user to a list.

Parameters:

*   **list\_id** (`str`) – The ID of the list.
    
*   **user\_id** (`str`) – The ID of the user to add to the list.
    

Returns:

The updated Twitter list.

Return type:

`List`

Examples

\>>> awaitclient.add\_list\_member('list id','user id')

_async_remove\_list\_member(_list\_id:str_, _user\_id:str_)→[List](#twikit.list.List "twikit.list.List")[\[source\]](_modules/twikit/client/client.html#Client.remove_list_member)[](#twikit.client.client.Client.remove_list_member "Link to this definition")

Removes a user from a list.

Parameters:

*   **list\_id** (`str`) – The ID of the list.
    
*   **user\_id** (`str`) – The ID of the user to remove from the list.
    

Returns:

The updated Twitter list.

Return type:

`List`

Examples

\>>> awaitclient.remove\_list\_member('list id','user id')

_async_get\_lists(_count:int\=100_, _cursor:str\=None_)→[Result](#twikit.utils.Result "twikit.utils.Result")\[[List](#twikit.list.List "twikit.list.List")\][\[source\]](_modules/twikit/client/client.html#Client.get_lists)[](#twikit.client.client.Client.get_lists "Link to this definition")

Retrieves a list of user lists.

Parameters:

**count** (`int`) – The number of lists to retrieve.

Returns:

Retrieved lists.

Return type:

Result\[`List`\]

Examples

\>>> lists\=client.get\_lists()\>>> forlist\_inlists:... print(list\_)<List id="..."><List id="...">......\>>> more\_lists\=lists.next()\# Retrieve more lists

_async_get\_list(_list\_id:str_)→[List](#twikit.list.List "twikit.list.List")[\[source\]](_modules/twikit/client/client.html#Client.get_list)[](#twikit.client.client.Client.get_list "Link to this definition")

Retrieve list by ID.

Parameters:

**list\_id** (`str`) – The ID of the list to retrieve.

Returns:

List object.

Return type:

`List`

_async_get\_list\_tweets(_list\_id:str_, _count:int\=20_, _cursor:str|None\=None_)→[Result](#twikit.utils.Result "twikit.utils.Result")\[[Tweet](#twikit.tweet.Tweet "twikit.tweet.Tweet")\][\[source\]](_modules/twikit/client/client.html#Client.get_list_tweets)[](#twikit.client.client.Client.get_list_tweets "Link to this definition")

Retrieves tweets from a list.

Parameters:

*   **list\_id** (`str`) – The ID of the list to retrieve tweets from.
    
*   **count** (`int`, default=20) – The number of tweets to retrieve.
    
*   **cursor** (`str`, default=None) – The cursor for pagination.
    

Returns:

A Result object containing the retrieved tweets.

Return type:

Result\[`Tweet`\]

Examples

\>>> tweets\=awaitclient.get\_list\_tweets('list id')\>>> fortweetintweets:... print(tweet)<Tweet id="..."><Tweet id="...">......

\>>> more\_tweets\=awaittweets.next()\# Retrieve more tweets\>>> fortweetinmore\_tweets:... print(tweet)<Tweet id="..."><Tweet id="...">......

_async_get\_list\_members(_list\_id:str_, _count:int\=20_, _cursor:str|None\=None_)→[Result](#twikit.utils.Result "twikit.utils.Result")\[[User](#twikit.user.User "twikit.user.User")\][\[source\]](_modules/twikit/client/client.html#Client.get_list_members)[](#twikit.client.client.Client.get_list_members "Link to this definition")

Retrieves members of a list.

Parameters:

*   **list\_id** (`str`) – List ID.
    
*   **count** (_int__,_ _default=20_) – Number of members to retrieve.
    

Returns:

Members of a list

Return type:

Result\[`User`\]

Examples

\>>> members\=client.get\_list\_members(123456789)\>>> formemberinmembers:... print(member)<User id="..."><User id="...">......\>>> more\_members\=members.next()\# Retrieve more members

_async_get\_list\_subscribers(_list\_id:str_, _count:int\=20_, _cursor:str|None\=None_)→[Result](#twikit.utils.Result "twikit.utils.Result")\[[User](#twikit.user.User "twikit.user.User")\][\[source\]](_modules/twikit/client/client.html#Client.get_list_subscribers)[](#twikit.client.client.Client.get_list_subscribers "Link to this definition")

Retrieves subscribers of a list.

Parameters:

*   **list\_id** (`str`) – List ID.
    
*   **count** (`int`, default=20) – Number of subscribers to retrieve.
    

Returns:

Subscribers of a list

Return type:

Result\[`User`\]

Examples

\>>> members\=client.get\_list\_subscribers(123456789)\>>> forsubscriberinsubscribers:... print(subscriber)<User id="..."><User id="...">......\>>> more\_subscribers\=members.next()\# Retrieve more subscribers

_async_search\_list(_query:str_, _count:int\=20_, _cursor:str|None\=None_)→[Result](#twikit.utils.Result "twikit.utils.Result")\[[List](#twikit.list.List "twikit.list.List")\][\[source\]](_modules/twikit/client/client.html#Client.search_list)[](#twikit.client.client.Client.search_list "Link to this definition")

Search for lists based on the provided query.

Parameters:

*   **query** (`str`) – The search query.
    
*   **count** (`int`, default=20) – The number of lists to retrieve.
    

Returns:

An instance of the Result class containing the search results.

Return type:

Result\[`List`\]

Examples

\>>> lists\=awaitclient.search\_list('query')\>>> forlistinlists:... print(list)<List id="..."><List id="...">...

\>>> more\_lists\=awaitlists.next()\# Retrieve more lists

_async_get\_notifications(_type:Literal\['All','Verified','Mentions'\]_, _count:int\=40_, _cursor:str|None\=None_)→[Result](#twikit.utils.Result "twikit.utils.Result")\[[Notification](#twikit.notification.Notification "twikit.notification.Notification")\][\[source\]](_modules/twikit/client/client.html#Client.get_notifications)[](#twikit.client.client.Client.get_notifications "Link to this definition")

Retrieve notifications based on the provided type.

Parameters:

*   **type** (_{'All'__,_ _'Verified'__,_ _'Mentions'}_) – Type of notifications to retrieve. All: All notifications Verified: Notifications relating to authenticated users Mentions: Notifications with mentions
    
*   **count** (`int`, default=40) – Number of notifications to retrieve.
    

Returns:

List of retrieved notifications.

Return type:

Result\[`Notification`\]

Examples

\>>> notifications\=awaitclient.get\_notifications('All')\>>> fornotificationinnotifications:... print(notification)<Notification id="..."><Notification id="...">......

\>>> \# Retrieve more notifications\>>> more\_notifications\=awaitnotifications.next()

Searchs communities based on the specified query.

Parameters:

**query** (`str`) – The search query.

Returns:

List of retrieved communities.

Return type:

Result\[`Community`\]

Examples

\>>> communities\=awaitclient.search\_communities('query')\>>> forcommunityincommunities:... print(community)<Community id="..."><Community id="...">...

\>>> \# Retrieve more communities\>>> more\_communities\=awaitcommunities.next()

Retrieves community by ID.

Parameters:

**list\_id** (`str`) – The ID of the community to retrieve.

Returns:

Community object.

Return type:

`Community`

Retrieves tweets from a community.

Parameters:

*   **community\_id** (`str`) – The ID of the community.
    
*   **tweet\_type** (_{'Top'__,_ _'Latest'__,_ _'Media'}_) – The type of tweets to retrieve.
    
*   **count** (`int`, default=40) – The number of tweets to retrieve.
    

Returns:

List of retrieved tweets.

Return type:

Result\[`Tweet`\]

Examples

\>>> community\_id\='...'\>>> tweets\=awaitclient.get\_community\_tweets(community\_id,'Latest')\>>> fortweetintweets:... print(tweet)<Tweet id="..."><Tweet id="...">...\>>> more\_tweets\=awaittweets.next()\# Retrieve more tweets

_async_get\_communities\_timeline(_count:int\=20_, _cursor:str|None\=None_)→[Result](#twikit.utils.Result "twikit.utils.Result")\[[Tweet](#twikit.tweet.Tweet "twikit.tweet.Tweet")\][\[source\]](_modules/twikit/client/client.html#Client.get_communities_timeline)[](#twikit.client.client.Client.get_communities_timeline "Link to this definition")

Retrieves tweets from communities timeline.

Parameters:

**count** (`int`, default=20) – The number of tweets to retrieve.

Returns:

List of retrieved tweets.

Return type:

Result\[`Tweet`\]

Examples

\>>> tweets\=awaitclient.get\_communities\_timeline()\>>> fortweetintweets:... print(tweet)<Tweet id="..."><Tweet id="...">...\>>> more\_tweets\=awaittweets.next()\# Retrieve more tweets

Join a community.

Parameters:

**community\_id** (`str`) – The ID of the community to join.

Returns:

The joined community.

Return type:

`Community`

Leave a community.

Parameters:

**community\_id** (`str`) – The ID of the community to leave.

Returns:

The left community.

Return type:

`Community`

Request to join a community.

Parameters:

*   **community\_id** (`str`) – The ID of the community to request to join.
    
*   **answer** (`str`, default=None) – The answer to the join request.
    

Returns:

The requested community.

Return type:

`Community`

Retrieves members of a community.

Parameters:

*   **community\_id** (`str`) – The ID of the community.
    
*   **count** (`int`, default=20) – The number of members to retrieve.
    

Returns:

List of retrieved members.

Return type:

Result\[`CommunityMember`\]

Retrieves moderators of a community.

Parameters:

*   **community\_id** (`str`) – The ID of the community.
    
*   **count** (`int`, default=20) – The number of moderators to retrieve.
    

Returns:

List of retrieved moderators.

Return type:

Result\[`CommunityMember`\]

Searchs tweets in a community.

Parameters:

*   **community\_id** (`str`) – The ID of the community.
    
*   **query** (`str`) – The search query.
    
*   **count** (`int`, default=20) – The number of tweets to retrieve.
    

Returns:

List of retrieved tweets.

Return type:

Result\[`Tweet`\]

_async_get\_streaming\_session(_topics:set\[str\]_, _auto\_reconnect:bool\=True_)→[StreamingSession](#twikit.streaming.StreamingSession "twikit.streaming.StreamingSession")[\[source\]](_modules/twikit/client/client.html#Client.get_streaming_session)[](#twikit.client.client.Client.get_streaming_session "Link to this definition")

Returns a session for interacting with the streaming API.

Parameters:

*   **topics** (set\[`str`\]) – The set of topics to stream. Topics can be generated using [`Topic`](#twikit.streaming.Topic "twikit.streaming.Topic").
    
*   **auto\_reconnect** (`bool`, default=True) – Whether to automatically reconnect when disconnected.
    

Returns:

A stream session instance.

Return type:

[`StreamingSession`](#twikit.streaming.StreamingSession "twikit.streaming.StreamingSession")

Examples

\>>> fromtwikit.streamingimportTopic\>>>\>>> topics\={... Topic.tweet\_engagement('1739617652'),\# Stream tweet engagement... Topic.dm\_update('17544932482-174455537996'),\# Stream DM update... Topic.dm\_typing('17544932482-174455537996')\# Stream DM typing... }\>>> session\=awaitclient.get\_streaming\_session(topics)\>>>\>>> asyncfortopic,payloadinsession:... ifpayload.dm\_update:... conversation\_id\=payload.dm\_update.conversation\_id... user\_id\=payload.dm\_update.user\_id... print(f'{conversation\_id}: {user\_id} sent a message')\>>>\>>> ifpayload.dm\_typing:... conversation\_id\=payload.dm\_typing.conversation\_id... user\_id\=payload.dm\_typing.user\_id... print(f'{conversation\_id}: {user\_id} is typing')\>>>\>>> ifpayload.tweet\_engagement:... like\=payload.tweet\_engagement.like\_count... retweet\=payload.tweet\_engagement.retweet\_count... view\=payload.tweet\_engagement.view\_count... print('Tweet engagement updated:'... f'likes: {like} retweets: {retweet} views: {view}')

Topics to stream can be added or deleted using [`StreamingSession.update_subscriptions`](#twikit.streaming.StreamingSession.update_subscriptions "twikit.streaming.StreamingSession.update_subscriptions") method.

\>>> subscribe\_topics\={... Topic.tweet\_engagement('1749528513'),... Topic.tweet\_engagement('1765829534')... }\>>> unsubscribe\_topics\={... Topic.tweet\_engagement('1739617652'),... Topic.dm\_update('17544932482-174455537996'),... Topic.dm\_update('17544932482-174455537996')... }\>>> awaitsession.update\_subscriptions(... subscribe\_topics,unsubscribe\_topics... )

## Tweet[](#module-twikit.tweet "Link to this heading")

_class_twikit.tweet.Tweet(_client:[Client](#twikit.client.client.Client "twikit.client.client.Client")_, _data:dict_, _user:[User](#twikit.user.User "twikit.user.User")\=None_)[\[source\]](_modules/twikit/tweet.html#Tweet)[](#twikit.tweet.Tweet "Link to this definition")

id[](#twikit.tweet.Tweet.id "Link to this definition")

The unique identifier of the tweet.

Type:

`str`

created\_at[](#twikit.tweet.Tweet.created_at "Link to this definition")

The date and time when the tweet was created.

Type:

`str`

created\_at\_datetime[](#twikit.tweet.Tweet.created_at_datetime "Link to this definition")

The created\_at converted to datetime.

Type:

`datetime`

user[](#twikit.tweet.Tweet.user "Link to this definition")

Author of the tweet.

Type:

`User`

text[](#twikit.tweet.Tweet.text "Link to this definition")

The full text of the tweet.

Type:

`str`

lang[](#twikit.tweet.Tweet.lang "Link to this definition")

The language of the tweet.

Type:

`str`

in\_reply\_to[](#twikit.tweet.Tweet.in_reply_to "Link to this definition")

The tweet ID this tweet is in reply to, if any

Type:

`str`

is\_quote\_status[](#twikit.tweet.Tweet.is_quote_status "Link to this definition")

Indicates if the tweet is a quote status.

Type:

`bool`

quote[](#twikit.tweet.Tweet.quote "Link to this definition")

The Tweet being quoted (if any)

Type:

[`Tweet`](#twikit.tweet.Tweet "twikit.tweet.Tweet") | None

retweeted\_tweet[](#twikit.tweet.Tweet.retweeted_tweet "Link to this definition")

The Tweet being retweeted (if any)

Type:

[`Tweet`](#twikit.tweet.Tweet "twikit.tweet.Tweet") | None

possibly\_sensitive[](#twikit.tweet.Tweet.possibly_sensitive "Link to this definition")

Indicates if the tweet content may be sensitive.

Type:

`bool`

possibly\_sensitive\_editable[](#twikit.tweet.Tweet.possibly_sensitive_editable "Link to this definition")

Indicates if the tweet’s sensitivity can be edited.

Type:

`bool`

quote\_count[](#twikit.tweet.Tweet.quote_count "Link to this definition")

The count of quotes for the tweet.

Type:

`int`

media[](#twikit.tweet.Tweet.media "Link to this definition")

A list of media entities associated with the tweet.

Type:

`list`

reply\_count[](#twikit.tweet.Tweet.reply_count "Link to this definition")

The count of replies to the tweet.

Type:

`int`

favorite\_count[](#twikit.tweet.Tweet.favorite_count "Link to this definition")

The count of favorites or likes for the tweet.

Type:

`int`

favorited[](#twikit.tweet.Tweet.favorited "Link to this definition")

Indicates if the tweet is favorited.

Type:

`bool`

view\_count[](#twikit.tweet.Tweet.view_count "Link to this definition")

The count of views.

Type:

`int` | None

view\_count\_state[](#twikit.tweet.Tweet.view_count_state "Link to this definition")

The state of the tweet views.

Type:

`str` | None

retweet\_count[](#twikit.tweet.Tweet.retweet_count "Link to this definition")

The count of retweets for the tweet.

Type:

`int`

place[](#twikit.tweet.Tweet.place "Link to this definition")

The location associated with the tweet.

Type:

[`Place`](#twikit.geo.Place "twikit.geo.Place") | None

editable\_until\_msecs[](#twikit.tweet.Tweet.editable_until_msecs "Link to this definition")

The timestamp until which the tweet is editable.

Type:

`int`

is\_translatable[](#twikit.tweet.Tweet.is_translatable "Link to this definition")

Indicates if the tweet is translatable.

Type:

`bool`

is\_edit\_eligible[](#twikit.tweet.Tweet.is_edit_eligible "Link to this definition")

Indicates if the tweet is eligible for editing.

Type:

`bool`

edits\_remaining[](#twikit.tweet.Tweet.edits_remaining "Link to this definition")

The remaining number of edits allowed for the tweet.

Type:

`int`

Replies to the tweet.

Type:

Result\[[`Tweet`](#twikit.tweet.Tweet "twikit.tweet.Tweet")\] | None

reply\_to[](#twikit.tweet.Tweet.reply_to "Link to this definition")

A list of Tweet objects representing the tweets to which to reply.

Type:

list\[[`Tweet`](#twikit.tweet.Tweet "twikit.tweet.Tweet")\] | None

Related tweets.

Type:

list\[[`Tweet`](#twikit.tweet.Tweet "twikit.tweet.Tweet")\] | None

hashtags[](#twikit.tweet.Tweet.hashtags "Link to this definition")

Hashtags included in the tweet text.

Type:

list\[`str`\]

has\_card[](#twikit.tweet.Tweet.has_card "Link to this definition")

Indicates if the tweet contains a card.

Type:

`bool`

thumbnail\_title[](#twikit.tweet.Tweet.thumbnail_title "Link to this definition")

The title of the webpage displayed inside tweet’s card.

Type:

`str` | None

thumbnail\_url[](#twikit.tweet.Tweet.thumbnail_url "Link to this definition")

Link to the image displayed in the tweet’s card.

Type:

`str` | None

urls[](#twikit.tweet.Tweet.urls "Link to this definition")

Information about URLs contained in the tweet.

Type:

`list`

full\_text[](#twikit.tweet.Tweet.full_text "Link to this definition")

The full text of the tweet.

Type:

`str` | None

_async_delete()→Response[\[source\]](_modules/twikit/tweet.html#Tweet.delete)[](#twikit.tweet.Tweet.delete "Link to this definition")

Deletes the tweet.

Returns:

Response returned from twitter api.

Return type:

`httpx.Response`

Examples

_async_favorite()→Response[\[source\]](_modules/twikit/tweet.html#Tweet.favorite)[](#twikit.tweet.Tweet.favorite "Link to this definition")

Favorites the tweet.

Returns:

Response returned from twitter api.

Return type:

`httpx.Response`

See also

`Client.favorite_tweet`

_async_unfavorite()→Response[\[source\]](_modules/twikit/tweet.html#Tweet.unfavorite)[](#twikit.tweet.Tweet.unfavorite "Link to this definition")

Favorites the tweet.

Returns:

Response returned from twitter api.

Return type:

`httpx.Response`

See also

`Client.unfavorite_tweet`

_async_retweet()→Response[\[source\]](_modules/twikit/tweet.html#Tweet.retweet)[](#twikit.tweet.Tweet.retweet "Link to this definition")

Retweets the tweet.

Returns:

Response returned from twitter api.

Return type:

`httpx.Response`

_async_delete\_retweet()→Response[\[source\]](_modules/twikit/tweet.html#Tweet.delete_retweet)[](#twikit.tweet.Tweet.delete_retweet "Link to this definition")

Deletes the retweet.

Returns:

Response returned from twitter api.

Return type:

`httpx.Response`

See also

`Client.delete_retweet`

_async_bookmark()→Response[\[source\]](_modules/twikit/tweet.html#Tweet.bookmark)[](#twikit.tweet.Tweet.bookmark "Link to this definition")

Adds the tweet to bookmarks.

Returns:

Response returned from twitter api.

Return type:

`httpx.Response`

See also

`Client.bookmark_tweet`

_async_delete\_bookmark()→Response[\[source\]](_modules/twikit/tweet.html#Tweet.delete_bookmark)[](#twikit.tweet.Tweet.delete_bookmark "Link to this definition")

Removes the tweet from bookmarks.

Returns:

Response returned from twitter api.

Return type:

`httpx.Response`

See also

`Client.delete_bookmark`

_async_reply(_text:str\=''_, _media\_ids:list\[str\]|None\=None_, _\*\*kwargs_)→[Tweet](#twikit.tweet.Tweet "twikit.tweet.Tweet")[\[source\]](_modules/twikit/tweet.html#Tweet.reply)[](#twikit.tweet.Tweet.reply "Link to this definition")

Replies to the tweet.

Parameters:

*   **text** (`str`, default=’’) – The text content of the reply.
    
*   **media\_ids** (list\[`str`\], default=None) – A list of media IDs or URIs to attach to the reply. Media IDs can be obtained by using the upload\_media method.
    

Returns:

The created tweet.

Return type:

[`Tweet`](#twikit.tweet.Tweet "twikit.tweet.Tweet")

Examples

\>>> tweet\_text\='Example text'\>>> media\_ids\=\[... client.upload\_media('image1.png'),... client.upload\_media('image2.png')... \]\>>> awaittweet.reply(... tweet\_text,... media\_ids\=media\_ids... )

_async_get\_retweeters(_count:str\=40_, _cursor:str|None\=None_)→[Result](#twikit.utils.Result "twikit.utils.Result")\[[User](#twikit.user.User "twikit.user.User")\][\[source\]](_modules/twikit/tweet.html#Tweet.get_retweeters)[](#twikit.tweet.Tweet.get_retweeters "Link to this definition")

Retrieve users who retweeted the tweet.

Parameters:

*   **count** (`int`, default=40) – The maximum number of users to retrieve.
    
*   **cursor** (`str`, default=None) – A string indicating the position of the cursor for pagination.
    

Returns:

A list of users who retweeted the tweet.

Return type:

Result\[`User`\]

Examples

\>>> tweet\_id\='...'\>>> retweeters\=tweet.get\_retweeters()\>>> print(retweeters)\[<User id="...">, <User id="...">, ..., <User id="...">\]

\>>> more\_retweeters\=retweeters.next()\# Retrieve more retweeters.\>>> print(more\_retweeters)\[<User id="...">, <User id="...">, ..., <User id="...">\]

_async_get\_favoriters(_count:str\=40_, _cursor:str|None\=None_)→[Result](#twikit.utils.Result "twikit.utils.Result")\[[User](#twikit.user.User "twikit.user.User")\][\[source\]](_modules/twikit/tweet.html#Tweet.get_favoriters)[](#twikit.tweet.Tweet.get_favoriters "Link to this definition")

Retrieve users who favorited a specific tweet.

Parameters:

*   **tweet\_id** (`str`) – The ID of the tweet.
    
*   **count** (`int`, default=40) – The maximum number of users to retrieve.
    
*   **cursor** (`str`, default=None) – A string indicating the position of the cursor for pagination.
    

Returns:

A list of users who favorited the tweet.

Return type:

Result\[`User`\]

Examples

\>>> tweet\_id\='...'\>>> favoriters\=tweet.get\_favoriters()\>>> print(favoriters)\[<User id="...">, <User id="...">, ..., <User id="...">\]

\>>> more\_favoriters\=favoriters.next()\# Retrieve more favoriters.\>>> print(more\_favoriters)\[<User id="...">, <User id="...">, ..., <User id="...">\]

_async_get\_similar\_tweets()→list\[[Tweet](#twikit.tweet.Tweet "twikit.tweet.Tweet")\][\[source\]](_modules/twikit/tweet.html#Tweet.get_similar_tweets)[](#twikit.tweet.Tweet.get_similar_tweets "Link to this definition")

Retrieves tweets similar to the tweet (Twitter premium only).

Returns:

A list of Tweet objects representing tweets similar to the tweet.

Return type:

list\[[`Tweet`](#twikit.tweet.Tweet "twikit.tweet.Tweet")\]

_class_twikit.tweet.Poll(_client:[Client](#twikit.client.client.Client "twikit.client.client.Client")_, _data:dict_, _tweet:[Tweet](#twikit.tweet.Tweet "twikit.tweet.Tweet")|None\=None_)[\[source\]](_modules/twikit/tweet.html#Poll)[](#twikit.tweet.Poll "Link to this definition")

Represents a poll associated with a tweet. .. attribute:: tweet

> The tweet associated with the poll.
> 
> type:
> 
> [`Tweet`](#twikit.tweet.Tweet "twikit.tweet.Tweet")

id[](#twikit.tweet.Poll.id "Link to this definition")

The unique identifier of the poll.

Type:

`str`

name[](#twikit.tweet.Poll.name "Link to this definition")

The name of the poll.

Type:

`str`

choices[](#twikit.tweet.Poll.choices "Link to this definition")

A list containing dictionaries representing poll choices. Each dictionary contains ‘label’ and ‘count’ keys for choice label and count.

Type:

list\[`dict`\]

duration\_minutes[](#twikit.tweet.Poll.duration_minutes "Link to this definition")

The duration of the poll in minutes.

Type:

`int`

end\_datetime\_utc[](#twikit.tweet.Poll.end_datetime_utc "Link to this definition")

The end date and time of the poll in UTC format.

Type:

`str`

last\_updated\_datetime\_utc[](#twikit.tweet.Poll.last_updated_datetime_utc "Link to this definition")

The last updated date and time of the poll in UTC format.

Type:

`str`

selected\_choice[](#twikit.tweet.Poll.selected_choice "Link to this definition")

Number of the selected choice.

Type:

`str` | None

_async_vote(_selected\_choice:str_)→[Poll](#twikit.tweet.Poll "twikit.tweet.Poll")[\[source\]](_modules/twikit/tweet.html#Poll.vote)[](#twikit.tweet.Poll.vote "Link to this definition")

Vote on the poll with the specified selected choice. :param selected\_choice: The label of the selected choice for the vote. :type selected\_choice: `str`

Returns:

The Poll object representing the updated poll after voting.

Return type:

[`Poll`](#twikit.tweet.Poll "twikit.tweet.Poll")

Represents a community note.

The ID of the community note.

Type:

`str`

The text content of the community note.

Type:

`str`

A list of tags indicating misleading information.

Type:

list\[`str`\]

Indicates if the sources are trustworthy.

Type:

`bool`

A list of tags indicating helpful information.

Type:

list\[`str`\]

The timestamp when the note was created.

Type:

`int`

Indicates if the note can be appealed.

Type:

`bool`

The status of the appeal.

Type:

`str`

Indicates if the note is related to media content.

Type:

`bool`

Matches related to media content.

Type:

`str`

Birdwatch profile associated with the note.

Type:

`dict`

The ID of the tweet associated with the note.

Type:

`str`

## User[](#module-twikit.user "Link to this heading")

_class_twikit.user.User(_client:[Client](#twikit.client.client.Client "twikit.client.client.Client")_, _data:dict_)[\[source\]](_modules/twikit/user.html#User)[](#twikit.user.User "Link to this definition")

id[](#twikit.user.User.id "Link to this definition")

The unique identifier of the user.

Type:

`str`

created\_at[](#twikit.user.User.created_at "Link to this definition")

The date and time when the user account was created.

Type:

`str`

name[](#twikit.user.User.name "Link to this definition")

The user’s name.

Type:

`str`

screen\_name[](#twikit.user.User.screen_name "Link to this definition")

The user’s screen name.

Type:

`str`

profile\_image\_url[](#twikit.user.User.profile_image_url "Link to this definition")

The URL of the user’s profile image (HTTPS version).

Type:

`str`

The URL of the user’s profile banner.

Type:

`str`

url[](#twikit.user.User.url "Link to this definition")

The user’s URL.

Type:

`str`

location[](#twikit.user.User.location "Link to this definition")

The user’s location information.

Type:

`str`

description[](#twikit.user.User.description "Link to this definition")

The user’s profile description.

Type:

`str`

description\_urls[](#twikit.user.User.description_urls "Link to this definition")

URLs found in the user’s profile description.

Type:

`list`

urls[](#twikit.user.User.urls "Link to this definition")

URLs associated with the user.

Type:

`list`

pinned\_tweet\_ids[](#twikit.user.User.pinned_tweet_ids "Link to this definition")

The IDs of tweets that the user has pinned to their profile.

Type:

`str`

is\_blue\_verified[](#twikit.user.User.is_blue_verified "Link to this definition")

Indicates if the user is verified with a blue checkmark.

Type:

`bool`

verified[](#twikit.user.User.verified "Link to this definition")

Indicates if the user is verified.

Type:

`bool`

possibly\_sensitive[](#twikit.user.User.possibly_sensitive "Link to this definition")

Indicates if the user’s content may be sensitive.

Type:

`bool`

can\_dm[](#twikit.user.User.can_dm "Link to this definition")

Indicates whether the user can receive direct messages.

Type:

`bool`

can\_media\_tag[](#twikit.user.User.can_media_tag "Link to this definition")

Indicates whether the user can be tagged in media.

Type:

`bool`

want\_retweets[](#twikit.user.User.want_retweets "Link to this definition")

Indicates if the user wants retweets.

Type:

`bool`

default\_profile[](#twikit.user.User.default_profile "Link to this definition")

Indicates if the user has the default profile.

Type:

`bool`

default\_profile\_image[](#twikit.user.User.default_profile_image "Link to this definition")

Indicates if the user has the default profile image.

Type:

`bool`

has\_custom\_timelines[](#twikit.user.User.has_custom_timelines "Link to this definition")

Indicates if the user has custom timelines.

Type:

`bool`

followers\_count[](#twikit.user.User.followers_count "Link to this definition")

The count of followers.

Type:

`int`

fast\_followers\_count[](#twikit.user.User.fast_followers_count "Link to this definition")

The count of fast followers.

Type:

`int`

normal\_followers\_count[](#twikit.user.User.normal_followers_count "Link to this definition")

The count of normal followers.

Type:

`int`

following\_count[](#twikit.user.User.following_count "Link to this definition")

The count of users the user is following.

Type:

`int`

favourites\_count[](#twikit.user.User.favourites_count "Link to this definition")

The count of favorites or likes.

Type:

`int`

listed\_count[](#twikit.user.User.listed_count "Link to this definition")

The count of lists the user is a member of.

Type:

`int`

media\_count[](#twikit.user.User.media_count "Link to this definition")

The count of media items associated with the user.

Type:

`int`

statuses\_count[](#twikit.user.User.statuses_count "Link to this definition")

The count of tweets.

Type:

`int`

is\_translator[](#twikit.user.User.is_translator "Link to this definition")

Indicates if the user is a translator.

Type:

`bool`

translator\_type[](#twikit.user.User.translator_type "Link to this definition")

The type of translator.

Type:

`str`

profile\_interstitial\_type[](#twikit.user.User.profile_interstitial_type "Link to this definition")

The type of profile interstitial.

Type:

`str`

withheld\_in\_countries[](#twikit.user.User.withheld_in_countries "Link to this definition")

Countries where the user’s content is withheld.

Type:

list\[`str`\]

_property_created\_at\_datetime_:datetime_[](#twikit.user.User.created_at_datetime "Link to this definition")

_async_get\_tweets(_tweet\_type:Literal\['Tweets','Replies','Media','Likes'\]_, _count:int\=40_)→[Result](#twikit.utils.Result "twikit.utils.Result")\[[Tweet](#twikit.tweet.Tweet "twikit.tweet.Tweet")\][\[source\]](_modules/twikit/user.html#User.get_tweets)[](#twikit.user.User.get_tweets "Link to this definition")

Retrieves the user’s tweets.

Parameters:

*   **tweet\_type** (_{'Tweets'__,_ _'Replies'__,_ _'Media'__,_ _'Likes'}_) – The type of tweets to retrieve.
    
*   **count** (`int`, default=40) – The number of tweets to retrieve.
    

Returns:

A Result object containing a list of Tweet objects.

Return type:

Result\[`Tweet`\]

Examples

\>>> user\=awaitclient.get\_user\_by\_screen\_name('example\_user')\>>> tweets\=awaituser.get\_tweets('Tweets',count\=20)\>>> fortweetintweets:... print(tweet)<Tweet id="..."><Tweet id="...">......

\>>> more\_tweets\=awaittweets.next()\# Retrieve more tweets\>>> fortweetinmore\_tweets:... print(tweet)<Tweet id="..."><Tweet id="...">......

_async_follow()→Response[\[source\]](_modules/twikit/user.html#User.follow)[](#twikit.user.User.follow "Link to this definition")

Follows the user.

Returns:

Response returned from twitter api.

Return type:

`httpx.Response`

See also

`Client.follow_user`

_async_unfollow()→Response[\[source\]](_modules/twikit/user.html#User.unfollow)[](#twikit.user.User.unfollow "Link to this definition")

Unfollows the user.

Returns:

Response returned from twitter api.

Return type:

`httpx.Response`

See also

`Client.unfollow_user`

_async_block()→Response[\[source\]](_modules/twikit/user.html#User.block)[](#twikit.user.User.block "Link to this definition")

Blocks a user.

Parameters:

**user\_id** (`str`) – The ID of the user to block.

Returns:

Response returned from twitter api.

Return type:

`httpx.Response`

_async_unblock()→Response[\[source\]](_modules/twikit/user.html#User.unblock)[](#twikit.user.User.unblock "Link to this definition")

Unblocks a user.

Parameters:

**user\_id** (`str`) – The ID of the user to unblock.

Returns:

Response returned from twitter api.

Return type:

`httpx.Response`

_async_mute()→Response[\[source\]](_modules/twikit/user.html#User.mute)[](#twikit.user.User.mute "Link to this definition")

Mutes a user.

Parameters:

**user\_id** (`str`) – The ID of the user to mute.

Returns:

Response returned from twitter api.

Return type:

`httpx.Response`

_async_unmute()→Response[\[source\]](_modules/twikit/user.html#User.unmute)[](#twikit.user.User.unmute "Link to this definition")

Unmutes a user.

Parameters:

**user\_id** (`str`) – The ID of the user to unmute.

Returns:

Response returned from twitter api.

Return type:

`httpx.Response`

_async_get\_followers(_count:int\=20_)→[Result](#twikit.utils.Result "twikit.utils.Result")\[[User](#twikit.user.User "twikit.user.User")\][\[source\]](_modules/twikit/user.html#User.get_followers)[](#twikit.user.User.get_followers "Link to this definition")

Retrieves a list of followers for the user.

Parameters:

**count** (`int`, default=20) – The number of followers to retrieve.

Returns:

A list of User objects representing the followers.

Return type:

Result\[[`User`](#twikit.user.User "twikit.user.User")\]

See also

`Client.get_user_followers`

_async_get\_verified\_followers(_count:int\=20_)→[Result](#twikit.utils.Result "twikit.utils.Result")\[[User](#twikit.user.User "twikit.user.User")\][\[source\]](_modules/twikit/user.html#User.get_verified_followers)[](#twikit.user.User.get_verified_followers "Link to this definition")

Retrieves a list of verified followers for the user.

Parameters:

**count** (`int`, default=20) – The number of verified followers to retrieve.

Returns:

A list of User objects representing the verified followers.

Return type:

Result\[[`User`](#twikit.user.User "twikit.user.User")\]

See also

`Client.get_user_verified_followers`

_async_get\_followers\_you\_know(_count:int\=20_)→[Result](#twikit.utils.Result "twikit.utils.Result")\[[User](#twikit.user.User "twikit.user.User")\][\[source\]](_modules/twikit/user.html#User.get_followers_you_know)[](#twikit.user.User.get_followers_you_know "Link to this definition")

Retrieves a list of followers whom the user might know.

Parameters:

**count** (`int`, default=20) – The number of followers you might know to retrieve.

Returns:

A list of User objects representing the followers you might know.

Return type:

Result\[[`User`](#twikit.user.User "twikit.user.User")\]

See also

`Client.get_user_followers_you_know`

_async_get\_following(_count:int\=20_)→[Result](#twikit.utils.Result "twikit.utils.Result")\[[User](#twikit.user.User "twikit.user.User")\][\[source\]](_modules/twikit/user.html#User.get_following)[](#twikit.user.User.get_following "Link to this definition")

Retrieves a list of users whom the user is following.

Parameters:

**count** (`int`, default=20) – The number of following users to retrieve.

Returns:

A list of User objects representing the users being followed.

Return type:

Result\[[`User`](#twikit.user.User "twikit.user.User")\]

See also

`Client.get_user_following`

_async_get\_subscriptions(_count:int\=20_)→[Result](#twikit.utils.Result "twikit.utils.Result")\[[User](#twikit.user.User "twikit.user.User")\][\[source\]](_modules/twikit/user.html#User.get_subscriptions)[](#twikit.user.User.get_subscriptions "Link to this definition")

Retrieves a list of users whom the user is subscribed to.

Parameters:

**count** (`int`, default=20) – The number of subscriptions to retrieve.

Returns:

A list of User objects representing the subscribed users.

Return type:

Result\[[`User`](#twikit.user.User "twikit.user.User")\]

See also

`Client.get_user_subscriptions`

_async_get\_latest\_followers(_count:int|None\=None_, _cursor:str|None\=None_)→[Result](#twikit.utils.Result "twikit.utils.Result")\[[User](#twikit.user.User "twikit.user.User")\][\[source\]](_modules/twikit/user.html#User.get_latest_followers)[](#twikit.user.User.get_latest_followers "Link to this definition")

Retrieves the latest followers. Max count : 200

_async_get\_latest\_friends(_count:int|None\=None_, _cursor:str|None\=None_)→[Result](#twikit.utils.Result "twikit.utils.Result")\[[User](#twikit.user.User "twikit.user.User")\][\[source\]](_modules/twikit/user.html#User.get_latest_friends)[](#twikit.user.User.get_latest_friends "Link to this definition")

Retrieves the latest friends (following users). Max count : 200

_async_send\_dm(_text:str_, _media\_id:str\=None_, _reply\_to\=None_)→[Message](#twikit.message.Message "twikit.message.Message")[\[source\]](_modules/twikit/user.html#User.send_dm)[](#twikit.user.User.send_dm "Link to this definition")

Send a direct message to the user.

Parameters:

*   **text** (`str`) – The text content of the direct message.
    
*   **media\_id** (`str`, default=None) – The media ID associated with any media content to be included in the message. Media ID can be received by using the `upload_media()` method.
    
*   **reply\_to** (`str`, default=None) – Message ID to reply to.
    

Returns:

Message object containing information about the message sent.

Return type:

`Message`

Examples

\>>> \# send DM with media\>>> media\_id\=awaitclient.upload\_media('image.png')\>>> message\=awaituser.send\_dm('text',media\_id)\>>> print(message)<Message id="...">

See also

`Client.upload_media`, `Client.send_dm`

_async_get\_dm\_history(_max\_id:str\=None_)→[Result](#twikit.utils.Result "twikit.utils.Result")\[[Message](#twikit.message.Message "twikit.message.Message")\][\[source\]](_modules/twikit/user.html#User.get_dm_history)[](#twikit.user.User.get_dm_history "Link to this definition")

Retrieves the DM conversation history with the user.

Parameters:

**max\_id** (`str`, default=None) – If specified, retrieves messages older than the specified max\_id.

Returns:

A Result object containing a list of Message objects representing the DM conversation history.

Return type:

Result\[`Message`\]

Examples

\>>> messages\=awaituser.get\_dm\_history()\>>> formessageinmessages:\>>> print(message)<Message id="..."><Message id="...">......

\>>> more\_messages\=awaitmessages.next()\# Retrieve more messages\>>> formessageinmore\_messages:\>>> print(message)<Message id="..."><Message id="...">......

_async_get\_highlights\_tweets(_count:int\=20_, _cursor:str|None\=None_)→[Result](#twikit.utils.Result "twikit.utils.Result")\[[Tweet](#twikit.tweet.Tweet "twikit.tweet.Tweet")\][\[source\]](_modules/twikit/user.html#User.get_highlights_tweets)[](#twikit.user.User.get_highlights_tweets "Link to this definition")

Retrieves highlighted tweets from the user’s timeline.

Parameters:

**count** (`int`, default=20) – The number of tweets to retrieve.

Returns:

An instance of the Result class containing the highlighted tweets.

Return type:

Result\[`Tweet`\]

Examples

\>>> result\=awaituser.get\_highlights\_tweets()\>>> fortweetinresult:... print(tweet)<Tweet id="..."><Tweet id="...">......

\>>> more\_results\=awaitresult.next()\# Retrieve more highlighted tweets\>>> fortweetinmore\_results:... print(tweet)<Tweet id="..."><Tweet id="...">......

_async_update()→None[\[source\]](_modules/twikit/user.html#User.update)[](#twikit.user.User.update "Link to this definition")

## Message[](#module-twikit.message "Link to this heading")

_class_twikit.message.Message(_client:[Client](#twikit.client.client.Client "twikit.client.client.Client")_, _data:dict_, _sender\_id:str_, _recipient\_id:str_)[\[source\]](_modules/twikit/message.html#Message)[](#twikit.message.Message "Link to this definition")

Represents a direct message.

id[](#twikit.message.Message.id "Link to this definition")

The ID of the message.

Type:

`str`

time[](#twikit.message.Message.time "Link to this definition")

The timestamp of the message.

Type:

`str`

text[](#twikit.message.Message.text "Link to this definition")

The text content of the message.

Type:

`str`

attachment[](#twikit.message.Message.attachment "Link to this definition")

Attachment Information.

Type:

`dict`

_async_reply(_text:str_, _media\_id:str|None\=None_)→[Message](#twikit.message.Message "twikit.message.Message")[\[source\]](_modules/twikit/message.html#Message.reply)[](#twikit.message.Message.reply "Link to this definition")

Replies to the message.

Parameters:

*   **text** (`str`) – The text content of the direct message.
    
*   **media\_id** (`str`, default=None) – The media ID associated with any media content to be included in the message. Media ID can be received by using the `upload_media()` method.
    

Returns:

Message object containing information about the message sent.

Return type:

[`Message`](#twikit.message.Message "twikit.message.Message")

_async_add\_reaction(_emoji:str_)→Response[\[source\]](_modules/twikit/message.html#Message.add_reaction)[](#twikit.message.Message.add_reaction "Link to this definition")

Adds a reaction to the message.

Parameters:

**emoji** (`str`) – The emoji to be added as a reaction.

Returns:

Response returned from twitter api.

Return type:

`httpx.Response`

_async_remove\_reaction(_emoji:str_)→Response[\[source\]](_modules/twikit/message.html#Message.remove_reaction)[](#twikit.message.Message.remove_reaction "Link to this definition")

Removes a reaction from the message.

Parameters:

**emoji** (`str`) – The emoji to be removed.

Returns:

Response returned from twitter api.

Return type:

`httpx.Response`

_async_delete()→Response[\[source\]](_modules/twikit/message.html#Message.delete)[](#twikit.message.Message.delete "Link to this definition")

Deletes the message.

Returns:

Response returned from twitter api.

Return type:

`httpx.Response`

See also

`Client.delete_dm`

## Streaming[](#streaming "Link to this heading")

With the streaming API, you can receive real-time events such as tweet engagements, DM updates, and DM typings. The basic procedure involves looping through the stream session obtained with [`Client.get_streaming_session`](#twikit.client.client.Client.get_streaming_session "twikit.client.client.Client.get_streaming_session") and, if necessary, updating the topics to be streamed using [`StreamingSession.update_subscriptions`](#twikit.streaming.StreamingSession.update_subscriptions "twikit.streaming.StreamingSession.update_subscriptions").

Example Code:

fromtwikit.streamingimportTopictopics\={Topic.tweet\_engagement('1739617652'),\# Stream tweet engagementTopic.dm\_update('17544932482-174455537996'),\# Stream DM updateTopic.dm\_typing('17544932482-174455537996')\# Stream DM typing}session\=client.get\_streaming\_session(topics)fortopic,payloadinsession:ifpayload.dm\_update:conversation\_id\=payload.dm\_update.conversation\_iduser\_id\=payload.dm\_update.user\_idprint(f'{conversation\_id}: {user\_id} sent a message')ifpayload.dm\_typing:conversation\_id\=payload.dm\_typing.conversation\_iduser\_id\=payload.dm\_typing.user\_idprint(f'{conversation\_id}: {user\_id} is typing')ifpayload.tweet\_engagement:like\=payload.tweet\_engagement.like\_countretweet\=payload.tweet\_engagement.retweet\_countview\=payload.tweet\_engagement.view\_countprint(f'Tweet engagement updated likes: {like} retweets: {retweet} views: {view}')

_class_twikit.streaming.StreamingSession(_client:[Client](#twikit.client.client.Client "twikit.client.client.Client")_, _session\_id:str_, _stream:AsyncGenerator\[[Payload](#twikit.streaming.Payload "twikit.streaming.Payload")\]_, _topics:set\[str\]_, _auto\_reconnect:bool_)[\[source\]](_modules/twikit/streaming.html#StreamingSession)[](#twikit.streaming.StreamingSession "Link to this definition")

Represents a streaming session.

id[](#twikit.streaming.StreamingSession.id "Link to this definition")

The ID or the session.

Type:

`str`

topics[](#twikit.streaming.StreamingSession.topics "Link to this definition")

The topics to stream.

Type:

set\[`str`\]

_async_reconnect()→tuple\[str,[Payload](#twikit.streaming.Payload "twikit.streaming.Payload")\][\[source\]](_modules/twikit/streaming.html#StreamingSession.reconnect)[](#twikit.streaming.StreamingSession.reconnect "Link to this definition")

Reconnects the session.

_async_update\_subscriptions(_subscribe:set\[str\]|None\=None_, _unsubscribe:set\[str\]|None\=None_)→[Payload](#twikit.streaming.Payload "twikit.streaming.Payload")[\[source\]](_modules/twikit/streaming.html#StreamingSession.update_subscriptions)[](#twikit.streaming.StreamingSession.update_subscriptions "Link to this definition")

Updates subscriptions for the session.

Parameters:

*   **subscribe** (set\[`str`\], default=None) – Topics to subscribe to.
    
*   **unsubscribe** (set\[`str`\], default=None) – Topics to unsubscribe from.
    

Examples

\>>> fromtwikit.streamingimportTopic...\>>> subscribe\_topics\={... Topic.tweet\_engagement('1749528513'),... Topic.tweet\_engagement('1765829534')... }\>>> unsubscribe\_topics\={... Topic.tweet\_engagement('17396176529'),... Topic.dm\_update('17544932482-174455537996'),... Topic.dm\_typing('17544932482-174455537996)'... }\>>> awaitsession.update\_subscriptions(... subscribe\_topics,unsubscribe\_topics... )

Note

dm\_update and dm\_update cannot be added.

_class_twikit.streaming.Payload(_config:[ConfigEvent](#twikit.streaming.ConfigEvent "twikit.streaming.ConfigEvent")|None\=None_, _subscriptions:[SubscriptionsEvent](#twikit.streaming.SubscriptionsEvent "twikit.streaming.SubscriptionsEvent")|None\=None_, _tweet\_engagement:[TweetEngagementEvent](#twikit.streaming.TweetEngagementEvent "twikit.streaming.TweetEngagementEvent")|None\=None_, _dm\_update:[DMUpdateEvent](#twikit.streaming.DMUpdateEvent "twikit.streaming.DMUpdateEvent")|None\=None_, _dm\_typing:[DMTypingEvent](#twikit.streaming.DMTypingEvent "twikit.streaming.DMTypingEvent")|None\=None_)[\[source\]](_modules/twikit/streaming.html#Payload)[](#twikit.streaming.Payload "Link to this definition")

Represents a payload containing several types of events.

config_:[ConfigEvent](#twikit.streaming.ConfigEvent "twikit.streaming.ConfigEvent")|None_[](#twikit.streaming.Payload.config "Link to this definition")

The configuration event.

subscriptions_:[SubscriptionsEvent](#twikit.streaming.SubscriptionsEvent "twikit.streaming.SubscriptionsEvent")|None_[](#twikit.streaming.Payload.subscriptions "Link to this definition")

The subscriptions event.

tweet\_engagement_:[TweetEngagementEvent](#twikit.streaming.TweetEngagementEvent "twikit.streaming.TweetEngagementEvent")|None_[](#twikit.streaming.Payload.tweet_engagement "Link to this definition")

The tweet engagement event.

dm\_update_:[DMUpdateEvent](#twikit.streaming.DMUpdateEvent "twikit.streaming.DMUpdateEvent")|None_[](#twikit.streaming.Payload.dm_update "Link to this definition")

The direct message update event.

dm\_typing_:[DMTypingEvent](#twikit.streaming.DMTypingEvent "twikit.streaming.DMTypingEvent")|None_[](#twikit.streaming.Payload.dm_typing "Link to this definition")

The direct message typing event.

_class_twikit.streaming.ConfigEvent(_session\_id:str_, _subscription\_ttl\_millis:int_, _heartbeat\_millis:int_)[\[source\]](_modules/twikit/streaming.html#ConfigEvent)[](#twikit.streaming.ConfigEvent "Link to this definition")

Event representing configuration data.

session\_id_:str_[](#twikit.streaming.ConfigEvent.session_id "Link to this definition")

The session ID associated with the configuration.

subscription\_ttl\_millis_:int_[](#twikit.streaming.ConfigEvent.subscription_ttl_millis "Link to this definition")

The time to live for the subscription.

heartbeat\_millis_:int_[](#twikit.streaming.ConfigEvent.heartbeat_millis "Link to this definition")

The heartbeat interval in milliseconds.

_class_twikit.streaming.SubscriptionsEvent(_errors:list_)[\[source\]](_modules/twikit/streaming.html#SubscriptionsEvent)[](#twikit.streaming.SubscriptionsEvent "Link to this definition")

Event representing subscription status.

errors_:list_[](#twikit.streaming.SubscriptionsEvent.errors "Link to this definition")

A list of errors.

_class_twikit.streaming.TweetEngagementEvent(_like\_count:str|None_, _retweet\_count:str|None_, _view\_count:str|None_, _view\_count\_state:str|None_, _quote\_count:int|None_, _reply\_count:int|None_)[\[source\]](_modules/twikit/streaming.html#TweetEngagementEvent)[](#twikit.streaming.TweetEngagementEvent "Link to this definition")

Event representing tweet engagement metrics.

like\_count_:str|None_[](#twikit.streaming.TweetEngagementEvent.like_count "Link to this definition")

The number of likes on the tweet.

retweet\_count_:str|None_[](#twikit.streaming.TweetEngagementEvent.retweet_count "Link to this definition")

The number of retweets of the tweet.

view\_count_:str|None_[](#twikit.streaming.TweetEngagementEvent.view_count "Link to this definition")

The number of views of the tweet.

view\_count\_state_:str|None_[](#twikit.streaming.TweetEngagementEvent.view_count_state "Link to this definition")

The state of view count.

quote\_count_:int|None_[](#twikit.streaming.TweetEngagementEvent.quote_count "Link to this definition")

The number of quotes of the tweet.

reply\_count_:int|None_[](#twikit.streaming.TweetEngagementEvent.reply_count "Link to this definition")

Alias for field number 5

_class_twikit.streaming.DMUpdateEvent(_conversation\_id:str_, _user\_id:str_)[\[source\]](_modules/twikit/streaming.html#DMUpdateEvent)[](#twikit.streaming.DMUpdateEvent "Link to this definition")

Event representing a (DM) update.

conversation\_id_:str_[](#twikit.streaming.DMUpdateEvent.conversation_id "Link to this definition")

The ID of the conversation associated with the DM.

user\_id_:str_[](#twikit.streaming.DMUpdateEvent.user_id "Link to this definition")

ID of the user who sent the DM.

_class_twikit.streaming.DMTypingEvent(_conversation\_id:str_, _user\_id:str_)[\[source\]](_modules/twikit/streaming.html#DMTypingEvent)[](#twikit.streaming.DMTypingEvent "Link to this definition")

Event representing typing indication in a DM conversation.

conversation\_id_:str_[](#twikit.streaming.DMTypingEvent.conversation_id "Link to this definition")

The conversation where typing indication occurred.

user\_id_:str_[](#twikit.streaming.DMTypingEvent.user_id "Link to this definition")

The ID of the typing user.

_class_twikit.streaming.Topic[\[source\]](_modules/twikit/streaming.html#Topic)[](#twikit.streaming.Topic "Link to this definition")

Utility class for generating topic strings for streaming.

_static_tweet\_engagement(_tweet\_id:str_)→str[\[source\]](_modules/twikit/streaming.html#Topic.tweet_engagement)[](#twikit.streaming.Topic.tweet_engagement "Link to this definition")

Generates a topic string for tweet engagement events.

Parameters:

**tweet\_id** (`str`) – The ID of the tweet.

Returns:

The topic string for tweet engagement events.

Return type:

`str`

_static_dm\_update(_conversation\_id:str_)→str[\[source\]](_modules/twikit/streaming.html#Topic.dm_update)[](#twikit.streaming.Topic.dm_update "Link to this definition")

Generates a topic string for direct message update events.

Parameters:

**conversation\_id** (`str`) – The ID of the conversation. Group ID (00000000) or partner\_ID-your\_ID (00000000-00000001)

Returns:

The topic string for direct message update events.

Return type:

`str`

_static_dm\_typing(_conversation\_id:str_)→str[\[source\]](_modules/twikit/streaming.html#Topic.dm_typing)[](#twikit.streaming.Topic.dm_typing "Link to this definition")

Generates a topic string for direct message typing events.

Parameters:

**conversation\_id** (`str`) – The ID of the conversation. Group ID (00000000) or partner\_ID-your\_ID (00000000-00000001)

Returns:

The topic string for direct message typing events.

Return type:

`str`

## Trend[](#module-twikit.trend "Link to this heading")

_class_twikit.trend.Trend(_client:[Client](#twikit.client.client.Client "twikit.client.client.Client")_, _data:dict_)[\[source\]](_modules/twikit/trend.html#Trend)[](#twikit.trend.Trend "Link to this definition")

name[](#twikit.trend.Trend.name "Link to this definition")

The name of the trending topic.

Type:

`str`

tweets\_count[](#twikit.trend.Trend.tweets_count "Link to this definition")

The count of tweets associated with the trend.

Type:

`int`

domain\_context[](#twikit.trend.Trend.domain_context "Link to this definition")

The context or domain associated with the trend.

Type:

`str`

grouped\_trends[](#twikit.trend.Trend.grouped_trends "Link to this definition")

A list of trend names grouped under the main trend.

Type:

``list`[:class:`str``\]

_class_twikit.trend.PlaceTrends[\[source\]](_modules/twikit/trend.html#PlaceTrends)[](#twikit.trend.PlaceTrends "Link to this definition")

trends_:list\[[PlaceTrend](#twikit.trend.PlaceTrend "twikit.trend.PlaceTrend")\]_[](#twikit.trend.PlaceTrends.trends "Link to this definition")

as\_of_:str_[](#twikit.trend.PlaceTrends.as_of "Link to this definition")

created\_at_:str_[](#twikit.trend.PlaceTrends.created_at "Link to this definition")

locations_:dict_[](#twikit.trend.PlaceTrends.locations "Link to this definition")

_class_twikit.trend.PlaceTrend(_client:[Client](#twikit.client.client.Client "twikit.client.client.Client")_, _data:dict_)[\[source\]](_modules/twikit/trend.html#PlaceTrend)[](#twikit.trend.PlaceTrend "Link to this definition")

name[](#twikit.trend.PlaceTrend.name "Link to this definition")

The name of the trend.

Type:

`str`

url[](#twikit.trend.PlaceTrend.url "Link to this definition")

The URL to view the trend.

Type:

`str`

query[](#twikit.trend.PlaceTrend.query "Link to this definition")

The search query corresponding to the trend.

Type:

`str`

tweet\_volume[](#twikit.trend.PlaceTrend.tweet_volume "Link to this definition")

The volume of tweets associated with the trend.

Type:

`int`

_class_twikit.trend.Location(_client:[Client](#twikit.client.client.Client "twikit.client.client.Client")_, _data:dict_)[\[source\]](_modules/twikit/trend.html#Location)[](#twikit.trend.Location "Link to this definition")

_async_get\_trends()→[PlaceTrends](#twikit.trend.PlaceTrends "twikit.trend.PlaceTrends")[\[source\]](_modules/twikit/trend.html#Location.get_trends)[](#twikit.trend.Location.get_trends "Link to this definition")

## List[](#list "Link to this heading")

_class_twikit.list.List(_client:[Client](#twikit.client.client.Client "twikit.client.client.Client")_, _data:dict_)[\[source\]](_modules/twikit/list.html#List)[](#twikit.list.List "Link to this definition")

Class representing a Twitter List.

id[](#twikit.list.List.id "Link to this definition")

The unique identifier of the List.

Type:

`str`

created\_at[](#twikit.list.List.created_at "Link to this definition")

The timestamp when the List was created.

Type:

`int`

Information about the default banner of the List.

Type:

`dict`

Information about the banner of the List. If custom banner is not set, it defaults to the default banner.

Type:

`dict`

description[](#twikit.list.List.description "Link to this definition")

The description of the List.

Type:

`str`

following[](#twikit.list.List.following "Link to this definition")

Indicates if the authenticated user is following the List.

Type:

`bool`

is\_member[](#twikit.list.List.is_member "Link to this definition")

Indicates if the authenticated user is a member of the List.

Type:

`bool`

member\_count[](#twikit.list.List.member_count "Link to this definition")

The number of members in the List.

Type:

`int`

mode[](#twikit.list.List.mode "Link to this definition")

The mode of the List, either ‘Private’ or ‘Public’.

Type:

{‘Private’, ‘Public’}

muting[](#twikit.list.List.muting "Link to this definition")

Indicates if the authenticated user is muting the List.

Type:

`bool`

name[](#twikit.list.List.name "Link to this definition")

The name of the List.

Type:

`str`

pinning[](#twikit.list.List.pinning "Link to this definition")

Indicates if the List is pinned.

Type:

`bool`

subscriber\_count[](#twikit.list.List.subscriber_count "Link to this definition")

The number of subscribers to the List.

Type:

`int`

_property_created\_at\_datetime_:datetime_[](#twikit.list.List.created_at_datetime "Link to this definition")

Edit the banner image of the list.

Parameters:

**media\_id** (`str`) – The ID of the media to use as the new banner image.

Returns:

Response returned from twitter api.

Return type:

`httpx.Response`

Examples

\>>> media\_id\=awaitclient.upload\_media('image.png')\>>> awaitmedia.edit\_banner(media\_id)

Deletes the list banner.

_async_edit(_name:str|None\=None_, _description:str|None\=None_, _is\_private:bool|None\=None_)→[List](#twikit.list.List "twikit.list.List")[\[source\]](_modules/twikit/list.html#List.edit)[](#twikit.list.List.edit "Link to this definition")

Edits list information.

Parameters:

*   **name** (`str`, default=None) – The new name for the list.
    
*   **description** (`str`, default=None) – The new description for the list.
    
*   **is\_private** (`bool`, default=None) – Indicates whether the list should be private (True) or public (False).
    

Returns:

The updated Twitter list.

Return type:

[`List`](#twikit.list.List "twikit.list.List")

Examples

\>>> awaitlist.edit(... 'new name','new description',True... )

_async_add\_member(_user\_id:str_)→Response[\[source\]](_modules/twikit/list.html#List.add_member)[](#twikit.list.List.add_member "Link to this definition")

Adds a member to the list.

_async_remove\_member(_user\_id:str_)→Response[\[source\]](_modules/twikit/list.html#List.remove_member)[](#twikit.list.List.remove_member "Link to this definition")

Removes a member from the list.

_async_get\_tweets(_count:int\=20_, _cursor:str|None\=None_)→[Result](#twikit.utils.Result "twikit.utils.Result")\[[Tweet](#twikit.tweet.Tweet "twikit.tweet.Tweet")\][\[source\]](_modules/twikit/list.html#List.get_tweets)[](#twikit.list.List.get_tweets "Link to this definition")

Retrieves tweets from the list.

Parameters:

*   **count** (`int`, default=20) – The number of tweets to retrieve.
    
*   **cursor** (`str`, default=None) – The cursor for pagination.
    

Returns:

A Result object containing the retrieved tweets.

Return type:

Result\[`Tweet`\]

Examples

\>>> tweets\=awaitlist.get\_tweets()\>>> fortweetintweets:... print(tweet)<Tweet id="..."><Tweet id="...">......

\>>> more\_tweets\=awaittweets.next()\# Retrieve more tweets\>>> fortweetinmore\_tweets:... print(tweet)<Tweet id="..."><Tweet id="...">......

_async_get\_members(_count:int\=20_, _cursor:str|None\=None_)→[Result](#twikit.utils.Result "twikit.utils.Result")\[[User](#twikit.user.User "twikit.user.User")\][\[source\]](_modules/twikit/list.html#List.get_members)[](#twikit.list.List.get_members "Link to this definition")

Retrieves members of the list.

Parameters:

**count** (`int`, default=20) – Number of members to retrieve.

Returns:

Members of the list

Return type:

Result\[`User`\]

Examples

\>>> members\=list\_.get\_members()\>>> formemberinmembers:... print(member)<User id="..."><User id="...">......\>>> more\_members\=members.next()\# Retrieve more members

_async_get\_subscribers(_count:int\=20_, _cursor:str|None\=None_)→[Result](#twikit.utils.Result "twikit.utils.Result")\[[User](#twikit.user.User "twikit.user.User")\][\[source\]](_modules/twikit/list.html#List.get_subscribers)[](#twikit.list.List.get_subscribers "Link to this definition")

Retrieves subscribers of the list.

Parameters:

**count** (`int`, default=20) – Number of subscribers to retrieve.

Returns:

Subscribers of the list

Return type:

Result\[`User`\]

Examples

\>>> subscribers\=list\_.get\_subscribers()\>>> forsubscriberinsubscribers:... print(subscriber)<User id="..."><User id="...">......\>>> more\_subscribers\=subscribers.next()\# Retrieve more subscribers

_async_update()→None[\[source\]](_modules/twikit/list.html#List.update)[](#twikit.list.List.update "Link to this definition")

## Notification[](#notification "Link to this heading")

_class_twikit.notification.Notification(_client:[Client](#twikit.client.client.Client "twikit.client.client.Client")_, _data:dict_, _tweet:[Tweet](#twikit.tweet.Tweet "twikit.tweet.Tweet")_, _from\_user:[User](#twikit.user.User "twikit.user.User")_)[\[source\]](_modules/twikit/notification.html#Notification)[](#twikit.notification.Notification "Link to this definition")

id[](#twikit.notification.Notification.id "Link to this definition")

The unique identifier of the notification.

Type:

`str`

timestamp\_ms[](#twikit.notification.Notification.timestamp_ms "Link to this definition")

The timestamp of the notification in milliseconds.

Type:

`int`

icon[](#twikit.notification.Notification.icon "Link to this definition")

Dictionary containing icon data for the notification.

Type:

`dict`

message[](#twikit.notification.Notification.message "Link to this definition")

The message text of the notification.

Type:

`str`

tweet[](#twikit.notification.Notification.tweet "Link to this definition")

The tweet associated with the notification.

Type:

[`Tweet`](#twikit.tweet.Tweet "twikit.tweet.Tweet")

from\_user[](#twikit.notification.Notification.from_user "Link to this definition")

The user who triggered the notification.

Type:

[`User`](#twikit.user.User "twikit.user.User")

## Geo[](#geo "Link to this heading")

_class_twikit.geo.Place(_client:[Client](#twikit.client.client.Client "twikit.client.client.Client")_, _data:dict_)[\[source\]](_modules/twikit/geo.html#Place)[](#twikit.geo.Place "Link to this definition")

id[](#twikit.geo.Place.id "Link to this definition")

The ID of the place.

Type:

`str`

name[](#twikit.geo.Place.name "Link to this definition")

The name of the place.

Type:

`str`

full\_name[](#twikit.geo.Place.full_name "Link to this definition")

The full name of the place.

Type:

`str`

country[](#twikit.geo.Place.country "Link to this definition")

The country where the place is located.

Type:

`str`

country\_code[](#twikit.geo.Place.country_code "Link to this definition")

The ISO 3166-1 alpha-2 country code of the place.

Type:

`str`

url[](#twikit.geo.Place.url "Link to this definition")

The URL providing more information about the place.

Type:

`str`

place\_type[](#twikit.geo.Place.place_type "Link to this definition")

The type of place.

Type:

`str`

attributes[](#twikit.geo.Place.attributes "Link to this definition")

Type:

`dict`

bounding\_box[](#twikit.geo.Place.bounding_box "Link to this definition")

The bounding box that defines the geographical area of the place.

Type:

`dict`

centroid[](#twikit.geo.Place.centroid "Link to this definition")

The geographical center of the place, represented by latitude and longitude.

Type:

list\[`float`\] | None

contained\_within[](#twikit.geo.Place.contained_within "Link to this definition")

A list of places that contain this place.

Type:

list\[[`Place`](#twikit.geo.Place "twikit.geo.Place")\]

_async_update()→None[\[source\]](_modules/twikit/geo.html#Place.update)[](#twikit.geo.Place.update "Link to this definition")

## Capsolver[](#capsolver "Link to this heading")

_class_twikit.\_captcha.capsolver.Capsolver(_api\_key:str_, _max\_attempts:int\=3_, _get\_result\_interval:float\=1.0_, _use\_blob\_data:bool\=False_)[\[source\]](_modules/twikit/_captcha/capsolver.html#Capsolver)[](#twikit._captcha.capsolver.Capsolver "Link to this definition")

You can automatically unlock the account by passing the captcha\_solver argument when initialising the [`Client`](#twikit.client.client.Client "twikit.client.client.Client").

First, visit [https://capsolver.com](https://capsolver.com/) and obtain your Capsolver API key. Next, pass the Capsolver instance to the client as shown in the example.

fromtwikit.twikit\_asyncimportCapsolver,Clientsolver\=Capsolver(api\_key\='your\_api\_key',max\_attempts\=10)client\=Client(captcha\_solver\=solver)

Parameters:

*   **api\_key** (`str`) – Capsolver API key.
    
*   **max\_attempts** (`int`, default=3) – The maximum number of attempts to solve the captcha.
    
*   **get\_result\_interval** (`float`, default=1.0)
    
*   **use\_blob\_data** (`bool`, default=False)
    

## Utils[](#utils "Link to this heading")

_class_twikit.utils.Result(_results:list\[T\]_, _fetch\_next\_result:Awaitable|None\=None_, _next\_cursor:str|None\=None_, _fetch\_previous\_result:Awaitable|None\=None_, _previous\_cursor:str|None\=None_)[\[source\]](_modules/twikit/utils.html#Result)[](#twikit.utils.Result "Link to this definition")

This class is for storing multiple results. The next method can be used to retrieve further results. As with a regular list, you can access elements by specifying indexes and iterate over elements using a for loop.

next\_cursor[](#twikit.utils.Result.next_cursor "Link to this definition")

Cursor used to obtain the next result.

Type:

`str`

previous\_cursor[](#twikit.utils.Result.previous_cursor "Link to this definition")

Cursor used to obtain the previous result.

Type:

`str`

token[](#twikit.utils.Result.token "Link to this definition")

Alias of next\_cursor.

Type:

`str`

cursor[](#twikit.utils.Result.cursor "Link to this definition")

Alias of next\_cursor.

Type:

`str`

_async_next()→[Result](#twikit.utils.Result "twikit.utils.Result")\[T\][\[source\]](_modules/twikit/utils.html#Result.next)[](#twikit.utils.Result.next "Link to this definition")

The next result.

_async_previous()→[Result](#twikit.utils.Result "twikit.utils.Result")\[T\][\[source\]](_modules/twikit/utils.html#Result.previous)[](#twikit.utils.Result.previous "Link to this definition")

The previous result.

_classmethod_empty()[\[source\]](_modules/twikit/utils.html#Result.empty)[](#twikit.utils.Result.empty "Link to this definition")

## Errors[](#module-twikit.errors "Link to this heading")

_exception_twikit.errors.TwitterException(_\*args:object_, _headers:dict|None\=None_)[\[source\]](_modules/twikit/errors.html#TwitterException)[](#twikit.errors.TwitterException "Link to this definition")

Base class for Twitter API related exceptions.

_exception_twikit.errors.BadRequest(_\*args:object_, _headers:dict|None\=None_)[\[source\]](_modules/twikit/errors.html#BadRequest)[](#twikit.errors.BadRequest "Link to this definition")

Exception raised for 400 Bad Request errors.

Exception raised for 401 Unauthorized errors.

_exception_twikit.errors.Forbidden(_\*args:object_, _headers:dict|None\=None_)[\[source\]](_modules/twikit/errors.html#Forbidden)[](#twikit.errors.Forbidden "Link to this definition")

Exception raised for 403 Forbidden errors.

_exception_twikit.errors.NotFound(_\*args:object_, _headers:dict|None\=None_)[\[source\]](_modules/twikit/errors.html#NotFound)[](#twikit.errors.NotFound "Link to this definition")

Exception raised for 404 Not Found errors.

_exception_twikit.errors.RequestTimeout(_\*args:object_, _headers:dict|None\=None_)[\[source\]](_modules/twikit/errors.html#RequestTimeout)[](#twikit.errors.RequestTimeout "Link to this definition")

Exception raised for 408 Request Timeout errors.

_exception_twikit.errors.TooManyRequests(_\*args_, _headers:dict|None\=None_)[\[source\]](_modules/twikit/errors.html#TooManyRequests)[](#twikit.errors.TooManyRequests "Link to this definition")

Exception raised for 429 Too Many Requests errors.

_exception_twikit.errors.ServerError(_\*args:object_, _headers:dict|None\=None_)[\[source\]](_modules/twikit/errors.html#ServerError)[](#twikit.errors.ServerError "Link to this definition")

Exception raised for 5xx Server Error responses.

_exception_twikit.errors.CouldNotTweet(_\*args:object_, _headers:dict|None\=None_)[\[source\]](_modules/twikit/errors.html#CouldNotTweet)[](#twikit.errors.CouldNotTweet "Link to this definition")

Exception raised when a tweet could not be sent.

_exception_twikit.errors.DuplicateTweet(_\*args:object_, _headers:dict|None\=None_)[\[source\]](_modules/twikit/errors.html#DuplicateTweet)[](#twikit.errors.DuplicateTweet "Link to this definition")

Exception raised when a tweet is a duplicate of another.

_exception_twikit.errors.TweetNotAvailable(_\*args:object_, _headers:dict|None\=None_)[\[source\]](_modules/twikit/errors.html#TweetNotAvailable)[](#twikit.errors.TweetNotAvailable "Link to this definition")

Exceptions raised when a tweet is not available.

_exception_twikit.errors.InvalidMedia(_\*args:object_, _headers:dict|None\=None_)[\[source\]](_modules/twikit/errors.html#InvalidMedia)[](#twikit.errors.InvalidMedia "Link to this definition")

Exception raised when there is a problem with the media ID sent with the tweet.

_exception_twikit.errors.UserNotFound(_\*args:object_, _headers:dict|None\=None_)[\[source\]](_modules/twikit/errors.html#UserNotFound)[](#twikit.errors.UserNotFound "Link to this definition")

Exception raised when a user does not exsit.

_exception_twikit.errors.UserUnavailable(_\*args:object_, _headers:dict|None\=None_)[\[source\]](_modules/twikit/errors.html#UserUnavailable)[](#twikit.errors.UserUnavailable "Link to this definition")

Exception raised when a user is unavailable.

_exception_twikit.errors.AccountSuspended(_\*args:object_, _headers:dict|None\=None_)[\[source\]](_modules/twikit/errors.html#AccountSuspended)[](#twikit.errors.AccountSuspended "Link to this definition")

Exception raised when the account is suspended.

_exception_twikit.errors.AccountLocked(_\*args:object_, _headers:dict|None\=None_)[\[source\]](_modules/twikit/errors.html#AccountLocked)[](#twikit.errors.AccountLocked "Link to this definition")

Exception raised when the account is locked (very likey is Arkose challenge).

twikit.errors.raise\_exceptions\_from\_response(_errors:list\[dict\]_)[\[source\]](_modules/twikit/errors.html#raise_exceptions_from_response)[](#twikit.errors.raise_exceptions_from_response "Link to this definition")